From 025b349587817719000e4ff4fe4ad762eafa8084 Mon Sep 17 00:00:00 2001
From: Carsten Lohmann <carsten.lohmann@bosch-si.com>
Date: Thu, 21 Nov 2019 10:25:08 +0100
Subject: [PATCH] Prevent NPE in closeAndFree() if connection is not
 established.

Signed-off-by: Carsten Lohmann <carsten.lohmann@bosch-si.com>
---
 .../org/eclipse/hono/client/HonoConnection.java  |  8 ++++++--
 .../hono/client/impl/HonoConnectionImpl.java     | 16 +++++++++++++---
 2 files changed, 19 insertions(+), 5 deletions(-)

diff --git a/client/src/main/java/org/eclipse/hono/client/HonoConnection.java b/client/src/main/java/org/eclipse/hono/client/HonoConnection.java
index 32e2c6ef89..40b23ef39d 100644
--- a/client/src/main/java/org/eclipse/hono/client/HonoConnection.java
+++ b/client/src/main/java/org/eclipse/hono/client/HonoConnection.java
@@ -353,10 +353,12 @@ static HonoConnection newConnection(final Vertx vertx, final ClientConfigPropert
      * <p>
      * This method is equivalent to {@link #closeAndFree(ProtonLink, long, Handler)}
      * but will use an implementation specific default time-out value.
+     * <p>
+     * If this connection is not established, the given handler is invoked immediately.
      *
      * @param link The link to close. If {@code null}, the given handler is invoked immediately.
      * @param closeHandler The handler to notify once the link has been closed.
-     * @throws NullPointerException if context or close handler are {@code null}.
+     * @throws NullPointerException if close handler is {@code null}.
      */
     void closeAndFree(ProtonLink<?> link, Handler<Void> closeHandler);
 
@@ -369,13 +371,15 @@ static HonoConnection newConnection(final Vertx vertx, final ClientConfigPropert
      * <li>the given number of milliseconds have passed</li>
      * </ul>
      * Afterwards the link's resources are freed up.
+     * <p>
+     * If this connection is not established, the given handler is invoked immediately.
      *
      * @param link The link to close. If {@code null}, the given handler is invoked immediately.
      * @param detachTimeOut The maximum number of milliseconds to wait for the peer's
      *                      detach frame or 0, if this method should wait indefinitely
      *                      for the peer's detach frame.
      * @param closeHandler The handler to notify once the link has been closed.
-     * @throws NullPointerException if context or close handler are {@code null}.
+     * @throws NullPointerException if close handler is {@code null}.
      * @throws IllegalArgumentException if detach time-out is &lt; 0.
      */
     void closeAndFree(
diff --git a/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java b/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java
index d4f819dc97..19eeb7e30d 100644
--- a/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java
+++ b/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java
@@ -597,14 +597,19 @@ private void failConnectionAttempt(final Throwable connectionFailureCause, final
      *
      * @param link The link to close. If {@code null}, the given handler is invoked immediately.
      * @param closeHandler The handler to notify once the link has been closed.
-     * @throws NullPointerException if context or close handler are {@code null}.
+     * @throws NullPointerException if close handler is {@code null}.
      */
     @Override
     public void closeAndFree(
             final ProtonLink<?> link,
             final Handler<Void> closeHandler) {
 
-        HonoProtonHelper.closeAndFree(context, link, closeHandler);
+        if (context == null) {
+            // this means that the connection to the peer is not established (yet)
+            closeHandler.handle(null);
+        } else {
+            HonoProtonHelper.closeAndFree(context, link, closeHandler);
+        }
     }
 
     /**
@@ -619,7 +624,12 @@ public void closeAndFree(
             final long detachTimeOut,
             final Handler<Void> closeHandler) {
 
-        HonoProtonHelper.closeAndFree(context, link, detachTimeOut, closeHandler);
+        if (context == null) {
+            // this means that the connection to the peer is not established (yet)
+            closeHandler.handle(null);
+        } else {
+            HonoProtonHelper.closeAndFree(context, link, detachTimeOut, closeHandler);
+        }
     }
 
     /**
