--- Dockerfile
+++ Dockerfile
@@ -1,45 +0,0 @@
-FROM microsoft/windowsservercore:1709
-
-SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
-
-ENV PYTHON_VERSION 3.6.5
-ENV NODEJS_VERSION 8.11.1
-ENV DOTNETCORESDK_VERSION 2.1.101
-
-WORKDIR /tmp
-
-RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}.exe' -f $env:PYTHON_VERSION); \
-    Write-Host ('Downloading {0}...' -f $python_url); \
-    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python-installer.exe'); \
-    Write-Host ('Installing Python...'); \
-    Start-Process python-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir=C:\Python3', 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); \
-    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
-
-RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
-    Write-Host ('Downloading {0}...' -f $node_url); \
-    (New-Object System.Net.WebClient).DownloadFile($node_url, '/tmp/nodejs-installer.msi'); \
-    Write-Host ('Installing Node...'); \
-    Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q'); \
-    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
-
-RUN Write-Host ('Downloading Azure CLI...'); \
-    Invoke-WebRequest 'https://aka.ms/installazurecliwindows' -OutFile azure-cli-installer.msi; \
-    Write-Host ('Installing Azure CLI...'); \
-    Start-Process azure-cli-installer.msi -Wait -ArgumentList @('/quiet', '/q');  \
-    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
-
-RUN $dotnetcoresdk_url = ('https://download.microsoft.com/download/D/C/F/DCFA73BE-93CE-4DA0-AB76-98972FD6E475/dotnet-sdk-{0}-win-x64.exe' -f $env:DOTNETCORESDK_VERSION); \
-    Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
-    (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk-installer.exe'); \
-    Write-Host ('Installing .NET Core SDK...'); \
-    Start-Process dotnetcoresdk-installer.exe -Wait -ArgumentList @('/quiet'); \
-    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
-
-RUN Write-Host ('Installing AZ CLI IOT Extension...'); \
-    az extension add --name azure-cli-iot-ext
-
-RUN Start-Process npm -Wait -ArgumentList @('i', '-g', 'iothub-explorer'); 
-
-WORKDIR /iotedge
-
-COPY install-dev.bat /scripts/install-dev.bat--- Dockerfile
+++ Dockerfile
@@ -1,53 +1,45 @@
-FROM microsoft/windowsservercore:1709 AS base
+FROM microsoft/windowsservercore:1709
 
 SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
 
 ENV PYTHON_VERSION 3.6.5
 ENV NODEJS_VERSION 8.11.1
-ENV DOTNETCORESDK_VERSION 2.1.4
-ENV DESTINATION_FOLDER C:\\tools
+ENV DOTNETCORESDK_VERSION 2.1.101
 
 WORKDIR /tmp
 
 RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}.exe' -f $env:PYTHON_VERSION); \
     Write-Host ('Downloading {0}...' -f $python_url); \
     (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python-installer.exe'); \
-    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
-    Write-Host ('Installing into {0}...' -f $install_folder); \
-    Start-Process python-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); 
+    Write-Host ('Installing Python...'); \
+    Start-Process python-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir=C:\Python3', 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); \
+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
 
 RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
     Write-Host ('Downloading {0}...' -f $node_url); \
     (New-Object System.Net.WebClient).DownloadFile($node_url, '/tmp/nodejs-installer.msi'); \
-    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'node'; \
-    Write-Host ('Installing into {0}...' -f $install_folder); \
-    Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); 
+    Write-Host ('Installing Node...'); \
+    Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q'); \
+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
 
 RUN Write-Host ('Downloading Azure CLI...'); \
     Invoke-WebRequest 'https://aka.ms/installazurecliwindows' -OutFile azure-cli-installer.msi; \
-    # $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'azcli'; \
-    Write-Host ('Installing...'); \
-    Start-Process azure-cli-installer.msi -Wait -ArgumentList @('/quiet', '/q');     
-# Start-Process azure-cli-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); # Seems that InstallDir is not used at all
+    Write-Host ('Installing Azure CLI...'); \
+    Start-Process azure-cli-installer.msi -Wait -ArgumentList @('/quiet', '/q');  \
+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
 
-RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0}/dotnet-sdk-{0}-win-x64.zip' -f $env:DOTNETCORESDK_VERSION); \
+RUN $dotnetcoresdk_url = ('https://download.microsoft.com/download/D/C/F/DCFA73BE-93CE-4DA0-AB76-98972FD6E475/dotnet-sdk-{0}-win-x64.exe' -f $env:DOTNETCORESDK_VERSION); \
     Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
-    (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk.zip'); \
-    Write-Host ('Unpacking .NET Core SDK...'); \
-    Expand-Archive dotnetcoresdk.zip -DestinationPath ..\\tools\\dotnet; 
+    (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk-installer.exe'); \
+    Write-Host ('Installing .NET Core SDK...'); \
+    Start-Process dotnetcoresdk-installer.exe -Wait -ArgumentList @('/quiet'); \
+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
 
-FROM microsoft/nanoserver:1709
+RUN Write-Host ('Installing AZ CLI IOT Extension...'); \
+    az extension add --name azure-cli-iot-ext
 
-RUN mkdir c:\\tools 
-RUN mkdir c:\\tools\\azure
+RUN Start-Process npm -Wait -ArgumentList @('i', '-g', 'iothub-explorer'); 
 
-COPY --from=base ["tools", "/tools"]
-COPY --from=base ["/Program Files (x86)/Microsoft SDKs/Azure/", "/tools/azure"]
+WORKDIR /iotedge
 
-USER ContainerAdministrator 
-RUN setx /M PATH "%PATH%;C:\\tools\\dotnet;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\azure\\CLI2\\wbin"
-USER ContainerUser
-
-RUN npm -i -g iothub-explorer 
-
-RUN az extension add --name azure-cli-iot-ext
+COPY install-dev.bat /scripts/install-dev.bat--- Dockerfile
+++ Dockerfile
@@ -45,7 +45,7 @@ COPY --from=base ["tools", "/tools"]
 COPY --from=base ["/Program Files (x86)/Microsoft SDKs/Azure/", "/tools/azure"]
 
 USER ContainerAdministrator 
-RUN setx /M PATH "%PATH%;C:\\tools\\dotnet;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\azure\\CLI2\\wbin\\;"
+RUN setx /M PATH "%PATH%;C:\\tools\\dotnet;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\azure\\CLI2\\wbin"
 USER ContainerUser
 
 RUN npm -i -g iothub-explorer 
--- Dockerfile
+++ Dockerfile
@@ -9,14 +9,7 @@ ENV DESTINATION_FOLDER C:\\tools
 
 WORKDIR /tmp
 
-#RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-embed-amd64.zip' -f $env:PYTHON_VERSION); \
-#    Write-Host ('Downloading {0}...' -f $python_url); \
-#    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python.zip'); \
-#    $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
-#    Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
-#    Expand-Archive python.zip -DestinationPath $unpack_folder; 
-
-RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON_VERSION); \
+RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}.exe' -f $env:PYTHON_VERSION); \
     Write-Host ('Downloading {0}...' -f $python_url); \
     (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python-installer.exe'); \
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
@@ -40,20 +33,21 @@ RUN Write-Host ('Downloading Azure CLI...'); \
 RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0}/dotnet-sdk-{0}-win-x64.zip' -f $env:DOTNETCORESDK_VERSION); \
     Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
     (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk.zip'); \
-    $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'dotnetcoresdk'; \
-    Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
-    Expand-Archive dotnetcoresdk.zip -DestinationPath $unpack_folder; 
+    Write-Host ('Unpacking .NET Core SDK...'); \
+    Expand-Archive dotnetcoresdk.zip -DestinationPath ..\\tools\\dotnet; 
 
-FROM microsoft/nanoserver:sac2016
+FROM microsoft/nanoserver:1709
 
 RUN mkdir c:\\tools 
 RUN mkdir c:\\tools\\azure
 
-COPY --from=base ["tools/", "/tools"]
+COPY --from=base ["tools", "/tools"]
 COPY --from=base ["/Program Files (x86)/Microsoft SDKs/Azure/", "/tools/azure"]
 
-RUN setx /M PATH "%PATH%;C:\\tools\\dotnetcoresdk;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\azure\\CLI2\\wbin\\;"
+USER ContainerAdministrator 
+RUN setx /M PATH "%PATH%;C:\\tools\\dotnet;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\azure\\CLI2\\wbin\\;"
+USER ContainerUser
 
-RUN npm i -g iothub-explorer 
+RUN npm -i -g iothub-explorer 
 
 RUN az extension add --name azure-cli-iot-ext
--- Dockerfile
+++ Dockerfile
@@ -5,14 +5,19 @@ SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPref
 ENV PYTHON_VERSION 3.6.5
 ENV NODEJS_VERSION 8.11.1
 ENV DOTNETCORESDK_VERSION 2.1.4
-ENV DOCKER_VERSION 17.09.0
 ENV DESTINATION_FOLDER C:\\tools
 
 WORKDIR /tmp
 
+#RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-embed-amd64.zip' -f $env:PYTHON_VERSION); \
+#    Write-Host ('Downloading {0}...' -f $python_url); \
+#    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python.zip'); \
+#    $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
+#    Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
+#    Expand-Archive python.zip -DestinationPath $unpack_folder; 
+
 RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON_VERSION); \
     Write-Host ('Downloading {0}...' -f $python_url); \
-    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
     (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python-installer.exe'); \
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
     Write-Host ('Installing into {0}...' -f $install_folder); \
@@ -20,39 +25,34 @@ RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe'
 
 RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
     Write-Host ('Downloading {0}...' -f $node_url); \
-    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
     (New-Object System.Net.WebClient).DownloadFile($node_url, '/tmp/nodejs-installer.msi'); \
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'node'; \
     Write-Host ('Installing into {0}...' -f $install_folder); \
     Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); 
 
+RUN Write-Host ('Downloading Azure CLI...'); \
+    Invoke-WebRequest 'https://aka.ms/installazurecliwindows' -OutFile azure-cli-installer.msi; \
+    # $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'azcli'; \
+    Write-Host ('Installing...'); \
+    Start-Process azure-cli-installer.msi -Wait -ArgumentList @('/quiet', '/q');     
+# Start-Process azure-cli-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); # Seems that InstallDir is not used at all
+
 RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0}/dotnet-sdk-{0}-win-x64.zip' -f $env:DOTNETCORESDK_VERSION); \
     Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
-    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
     (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk.zip'); \
     $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'dotnetcoresdk'; \
     Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
     Expand-Archive dotnetcoresdk.zip -DestinationPath $unpack_folder; 
 
-RUN $docker_url = ('https://download.docker.com/win/static/stable/x86_64/docker-{0}-ce.zip'  -f $env:DOCKER_VERSION);\
-    (New-Object System.Net.WebClient).DownloadFile($docker_url, '/tmp/docker.zip'); \
-    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath ''; \
-    Expand-Archive -Path .\docker.zip -DestinationPath $install_folder; \
-    Remove-Item ('{0}\docker\dockerd.exe' -f $env:DESTINATION_FOLDER)
-    
-FROM microsoft/nanoserver:1709
+FROM microsoft/nanoserver:sac2016
 
 RUN mkdir c:\\tools 
+RUN mkdir c:\\tools\\azure
 
 COPY --from=base ["tools/", "/tools"]
+COPY --from=base ["/Program Files (x86)/Microsoft SDKs/Azure/", "/tools/azure"]
 
-USER ContainerAdministrator
-
-RUN setx /M PATH "%PATH%;C:\\tools\\dotnetcoresdk;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\docker\\;"
-
-USER ContainerUser
-
-RUN pip install azure-cli
+RUN setx /M PATH "%PATH%;C:\\tools\\dotnetcoresdk;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\azure\\CLI2\\wbin\\;"
 
 RUN npm i -g iothub-explorer 
 
--- Dockerfile
+++ Dockerfile
@@ -57,5 +57,3 @@ RUN pip install azure-cli
 RUN npm i -g iothub-explorer 
 
 RUN az extension add --name azure-cli-iot-ext
-
-RUN pip install bumpversion==0.5.3 wheel==0.29.0 watchdog==0.8.3 flake8==2.6.0 tox==2.3.1 coverage==4.1 Sphinx==1.4.8 cryptography PyYAML==3.11 iotedgedev
--- Dockerfile
+++ Dockerfile
@@ -1,25 +1,2 @@
-FROM ubuntu:16.04
-ENV DEBIAN_FRONTEND noninteractive
-RUN apt-get update && \
-    apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip libltdl-dev docker.io && \ 
-    curl -sL https://deb.nodesource.com/setup_8.x | bash - && \
-    apt-get install -y nodejs && \
-    curl -O https://bootstrap.pypa.io/get-pip.py && python get-pip.py && \ 
-    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg && \ 
-    mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg && \ 
-    sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" > /etc/apt/sources.list.d/dotnetdev.list' && \ 
-    apt-get update && \ 
-    apt-get install -y dotnet-sdk-2.1.3 && \
-    AZ_REPO=$(lsb_release -cs) && \
-    echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
-    tee /etc/apt/sources.list.d/azure-cli.list && \
-    apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893 && \   
-    apt-get update && apt-get install azure-cli && \
-    az extension add --name azure-cli-iot-ext && \
-    npm i -g iothub-explorer && \
-    rm -rf /var/lib/apt/lists/*
-RUN apt-get update && \
-    apt-get install -y --no-install-recommends python-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev
-WORKDIR /home/iotedge
-RUN pip install bumpversion==0.5.3 wheel==0.29.0 watchdog==0.8.3 flake8==2.6.0 tox==2.3.1 coverage==4.1 Sphinx==1.4.8 cryptography PyYAML==3.11 iotedgedev
-ENV DEBIAN_FRONTEND teletype
+FROM jongallant/iotedgedev-deps:${VERSION}-linux
+RUN pip --no-cache-dir install -U iotedgedev--- Dockerfile
+++ Dockerfile
@@ -1,11 +1,15 @@
 FROM microsoft/windowsservercore:1709 AS base
+
 SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
+
 ENV PYTHON_VERSION 3.6.5
 ENV NODEJS_VERSION 8.11.1
 ENV DOTNETCORESDK_VERSION 2.1.4
 ENV DOCKER_VERSION 17.09.0
 ENV DESTINATION_FOLDER C:\\tools
+
 WORKDIR /tmp
+
 RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON_VERSION); \
     Write-Host ('Downloading {0}...' -f $python_url); \
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
@@ -13,6 +17,7 @@ RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe'
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
     Write-Host ('Installing into {0}...' -f $install_folder); \
     Start-Process python-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); 
+
 RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
     Write-Host ('Downloading {0}...' -f $node_url); \
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
@@ -20,6 +25,7 @@ RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'node'; \
     Write-Host ('Installing into {0}...' -f $install_folder); \
     Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); 
+
 RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0}/dotnet-sdk-{0}-win-x64.zip' -f $env:DOTNETCORESDK_VERSION); \
     Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
@@ -27,6 +33,7 @@ RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0
     $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'dotnetcoresdk'; \
     Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
     Expand-Archive dotnetcoresdk.zip -DestinationPath $unpack_folder; 
+
 RUN $docker_url = ('https://download.docker.com/win/static/stable/x86_64/docker-{0}-ce.zip'  -f $env:DOCKER_VERSION);\
     (New-Object System.Net.WebClient).DownloadFile($docker_url, '/tmp/docker.zip'); \
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath ''; \
@@ -34,15 +41,21 @@ RUN $docker_url = ('https://download.docker.com/win/static/stable/x86_64/docker-
     Remove-Item ('{0}\docker\dockerd.exe' -f $env:DESTINATION_FOLDER)
     
 FROM microsoft/nanoserver:1709
+
 RUN mkdir c:\\tools 
+
 COPY --from=base ["tools/", "/tools"]
+
 USER ContainerAdministrator
-RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python;C:\tools\python\Scripts;c:\tools\docker\;"
+
+RUN setx /M PATH "%PATH%;C:\\tools\\dotnetcoresdk;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\docker\\;"
+
 USER ContainerUser
-RUN python -m pip install --upgrade pip
+
 RUN pip install azure-cli
+
 RUN npm i -g iothub-explorer 
+
 RUN az extension add --name azure-cli-iot-ext
-RUN pip --no-cache-dir install -U iotedgedev
-WORKDIR /home/iotedge
-COPY install-dev.bat /scripts/install-dev.bat+
+RUN pip install bumpversion==0.5.3 wheel==0.29.0 watchdog==0.8.3 flake8==2.6.0 tox==2.3.1 coverage==4.1 Sphinx==1.4.8 cryptography PyYAML==3.11 iotedgedev
--- Dockerfile
+++ Dockerfile
@@ -1,6 +1,5 @@
 FROM ubuntu:16.04
 ENV DEBIAN_FRONTEND noninteractive
-ENV DOTNETCORESDK_VERSION 2.1.4
 RUN apt-get update && \
     apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip libltdl-dev docker.io && \ 
     curl -sL https://deb.nodesource.com/setup_8.x | bash - && \
@@ -10,7 +9,7 @@ RUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > mic
     mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg && \ 
     sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" > /etc/apt/sources.list.d/dotnetdev.list' && \ 
     apt-get update && \ 
-    apt-get install -y dotnet-sdk-${DOTNETCORESDK_VERSION}
+    apt-get install -y dotnet-sdk-2.1.3
 RUN AZ_REPO=$(lsb_release -cs) && \
     echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
     tee /etc/apt/sources.list.d/azure-cli.list && \
@@ -25,4 +24,4 @@ RUN pip --no-cache-dir install -U iotedgedev
 WORKDIR /home/iotedge
 COPY install-dev.sh /scripts/install-dev.sh
 RUN sed -i 's/\r//' /scripts/install-dev.sh
-ENV DEBIAN_FRONTEND teletype+ENV DEBIAN_FRONTEND teletype
--- Dockerfile
+++ Dockerfile
@@ -1,6 +1,6 @@
 FROM microsoft/windowsservercore:1709 AS base
 SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
-ARG PYTHON_VERSION 
+ENV PYTHON_VERSION 3.6.5
 ENV NODEJS_VERSION 8.11.1
 ENV DOTNETCORESDK_VERSION 2.1.4
 ENV DOCKER_VERSION 17.09.0
@@ -42,7 +42,6 @@ USER ContainerUser
 RUN python -m pip install --upgrade pip
 RUN pip install azure-cli
 RUN npm i -g iothub-explorer 
-RUN npm i -g tree-kill
 RUN az extension add --name azure-cli-iot-ext
 RUN pip --no-cache-dir install -U iotedgedev
 WORKDIR /home/iotedge
--- Dockerfile
+++ Dockerfile
@@ -1,27 +1,18 @@
 FROM microsoft/windowsservercore:1709 AS base
 SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
-ARG PYTHON2_VERSION
-ARG PYTHON3_VERSION
+ARG PYTHON_VERSION 
 ENV NODEJS_VERSION 8.11.1
 ENV DOTNETCORESDK_VERSION 2.1.4
 ENV DOCKER_VERSION 17.09.0
 ENV DESTINATION_FOLDER C:\\tools
 WORKDIR /tmp
-RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}.amd64.msi' -f $env:PYTHON2_VERSION); \
+RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON_VERSION); \
     Write-Host ('Downloading {0}...' -f $python_url); \
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
-    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python2-installer.msi'); \
-    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python2'; \
+    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python-installer.exe'); \
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
     Write-Host ('Installing into {0}...' -f $install_folder); \
-    Start-Process python2-installer.msi -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0');    
-RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON3_VERSION); \
-    Write-Host ('Downloading {0}...' -f $python_url); \
-    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
-    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python3-installer.exe'); \
-    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python3'; \
-    Write-Host ('Installing into {0}...' -f $install_folder); \
-    Start-Process python3-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); \
-    Rename-Item -Path "..\tools\python3\python.exe" -NewName "python3.exe"
+    Start-Process python-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); 
 RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
     Write-Host ('Downloading {0}...' -f $node_url); \
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
@@ -46,7 +37,7 @@ FROM microsoft/nanoserver:1709
 RUN mkdir c:\\tools 
 COPY --from=base ["tools/", "/tools"]
 USER ContainerAdministrator
-RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python2;C:\tools\python2\Scripts;c:\tools\docker\;"
+RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python;C:\tools\python\Scripts;c:\tools\docker\;"
 USER ContainerUser
 RUN python -m pip install --upgrade pip
 RUN pip install azure-cli
--- Dockerfile
+++ Dockerfile
@@ -46,7 +46,7 @@ FROM microsoft/nanoserver:1709
 RUN mkdir c:\\tools 
 COPY --from=base ["tools/", "/tools"]
 USER ContainerAdministrator
-RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python3;C:\tools\python3\Scripts;c:\tools\docker\;"
+RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python2;C:\tools\python2\Scripts;c:\tools\docker\;"
 USER ContainerUser
 RUN python -m pip install --upgrade pip
 RUN pip install azure-cli
--- Dockerfile
+++ Dockerfile
@@ -2,11 +2,10 @@ FROM ubuntu:16.04
 ENV DEBIAN_FRONTEND noninteractive
 ENV DOTNETCORESDK_VERSION 2.1.4
 RUN apt-get update && \
-    apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip python3-pip libltdl-dev docker.io && \ 
+    apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip libltdl-dev docker.io && \ 
     curl -sL https://deb.nodesource.com/setup_8.x | bash - && \
     apt-get install -y nodejs && \
-    alias python=python3 && \
-    alias pip=pip3 
+    curl -O https://bootstrap.pypa.io/get-pip.py && python get-pip.py
 RUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg && \ 
     mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg && \ 
     sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" > /etc/apt/sources.list.d/dotnetdev.list' && \ 
--- Dockerfile
+++ Dockerfile
@@ -22,7 +22,6 @@ RUN az extension add --name azure-cli-iot-ext && \
     apt-get update && \
     apt-get install -y --no-install-recommends python-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev && \
     rm -rf /var/lib/apt/lists/*
-RUN pip install setuptools
 RUN pip --no-cache-dir install -U iotedgedev
 WORKDIR /home/iotedge
 COPY install-dev.sh /scripts/install-dev.sh
--- Dockerfile
+++ Dockerfile
@@ -22,7 +22,6 @@ RUN az extension add --name azure-cli-iot-ext && \
     apt-get update && \
     apt-get install -y --no-install-recommends python-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev && \
     rm -rf /var/lib/apt/lists/*
-RUN python -m pip install --upgrade pip    
 RUN pip install setuptools
 RUN pip --no-cache-dir install -U iotedgedev
 WORKDIR /home/iotedge
--- Dockerfile
+++ Dockerfile
@@ -20,7 +20,8 @@ RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe'
     (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python3-installer.exe'); \
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python3'; \
     Write-Host ('Installing into {0}...' -f $install_folder); \
-    Start-Process python3-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0');     
+    Start-Process python3-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); \
+    Rename-Item -Path "..\tools\python3\python.exe" -NewName "python3.exe"
 RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
     Write-Host ('Downloading {0}...' -f $node_url); \
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
--- Dockerfile
+++ Dockerfile
@@ -1,35 +1,30 @@
-FROM ubuntu:18.04
+FROM ubuntu:16.04
 ENV DEBIAN_FRONTEND noninteractive
 ENV DOTNETCORESDK_VERSION 2.1.4
-RUN apt-get update
-RUN apt-get install gnupg gnupg2 gnupg1 -y && \
+RUN apt-get update && \
     apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip python3-pip libltdl-dev docker.io && \ 
     curl -sL https://deb.nodesource.com/setup_8.x | bash - && \
-    apt-get install -y nodejs 
-RUN apt-get install -y wget && \
-    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.asc.gpg && \
-    mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/ && \
-    wget -q https://packages.microsoft.com/config/ubuntu/18.04/prod.list && \
-    mv prod.list /etc/apt/sources.list.d/microsoft-prod.list && \
-    apt-get install -y apt-transport-https && \
-    apt-get update && \
-    apt-get install -y dotnet-sdk-2.1.200
+    apt-get install -y nodejs && \
+    alias python=python3 && \
+    alias pip=pip3 
+RUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg && \ 
+    mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg && \ 
+    sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" > /etc/apt/sources.list.d/dotnetdev.list' && \ 
+    apt-get update && \ 
+    apt-get install -y dotnet-sdk-${DOTNETCORESDK_VERSION}
 RUN AZ_REPO=$(lsb_release -cs) && \
     echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
     tee /etc/apt/sources.list.d/azure-cli.list && \
     apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893 && \   
     apt-get update && apt-get install azure-cli
 RUN az extension add --name azure-cli-iot-ext && \
-    npm i npm@latest -g && \
     npm i -g iothub-explorer && npm i -g tree-kill && \
+    apt-get update && \
     apt-get install -y --no-install-recommends python-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev && \
     rm -rf /var/lib/apt/lists/*
-RUN python -m pip install --upgrade pip && \
-    alias python=python3 && \
-    alias pip=pip3 && \
-    python -m pip install --upgrade pip && \
-    pip install setuptools && \
-    pip --no-cache-dir install -U iotedgedev
+RUN python -m pip install --upgrade pip    
+RUN pip install setuptools
+RUN pip --no-cache-dir install -U iotedgedev
 WORKDIR /home/iotedge
 COPY install-dev.sh /scripts/install-dev.sh
 RUN sed -i 's/\r//' /scripts/install-dev.sh
--- Dockerfile
+++ Dockerfile
@@ -1,4 +1,36 @@
-FROM iotedgedev-linux-base
-ARG IOTEDGEDEV_VERSION
-COPY iotedgedev-$IOTEDGEDEV_VERSION-py2.py3-none-any.whl dist/iotedgedev-$IOTEDGEDEV_VERSION-py2.py3-none-any.whl
-RUN pip install dist/iotedgedev-$IOTEDGEDEV_VERSION-py2.py3-none-any.whl+FROM ubuntu:18.04
+ENV DEBIAN_FRONTEND noninteractive
+ENV DOTNETCORESDK_VERSION 2.1.4
+RUN apt-get update
+RUN apt-get install gnupg gnupg2 gnupg1 -y && \
+    apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip python3-pip libltdl-dev docker.io && \ 
+    curl -sL https://deb.nodesource.com/setup_8.x | bash - && \
+    apt-get install -y nodejs 
+RUN apt-get install -y wget && \
+    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.asc.gpg && \
+    mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/ && \
+    wget -q https://packages.microsoft.com/config/ubuntu/18.04/prod.list && \
+    mv prod.list /etc/apt/sources.list.d/microsoft-prod.list && \
+    apt-get install -y apt-transport-https && \
+    apt-get update && \
+    apt-get install -y dotnet-sdk-2.1.200
+RUN AZ_REPO=$(lsb_release -cs) && \
+    echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
+    tee /etc/apt/sources.list.d/azure-cli.list && \
+    apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893 && \   
+    apt-get update && apt-get install azure-cli
+RUN az extension add --name azure-cli-iot-ext && \
+    npm i npm@latest -g && \
+    npm i -g iothub-explorer && npm i -g tree-kill && \
+    apt-get install -y --no-install-recommends python-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev && \
+    rm -rf /var/lib/apt/lists/*
+RUN python -m pip install --upgrade pip && \
+    alias python=python3 && \
+    alias pip=pip3 && \
+    python -m pip install --upgrade pip && \
+    pip install setuptools && \
+    pip --no-cache-dir install -U iotedgedev
+WORKDIR /home/iotedge
+COPY install-dev.sh /scripts/install-dev.sh
+RUN sed -i 's/\r//' /scripts/install-dev.sh
+ENV DEBIAN_FRONTEND teletype--- Dockerfile
+++ Dockerfile
@@ -1,4 +1,57 @@
-FROM iotedgedev-windows-base
-ARG IOTEDGEDEV_VERSION
-COPY iotedgedev-$IOTEDGEDEV_VERSION-py2.py3-none-any.whl dist/iotedgedev-latest-py2.py3-none-any.whl
-RUN pip install dist/iotedgedev-latest-py2.py3-none-any.whl+FROM microsoft/windowsservercore:1709 AS base
+SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
+ARG PYTHON2_VERSION
+ARG PYTHON3_VERSION
+ENV NODEJS_VERSION 8.11.1
+ENV DOTNETCORESDK_VERSION 2.1.4
+ENV DOCKER_VERSION 17.09.0
+ENV DESTINATION_FOLDER C:\\tools
+WORKDIR /tmp
+RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}.amd64.msi' -f $env:PYTHON2_VERSION); \
+    Write-Host ('Downloading {0}...' -f $python_url); \
+    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
+    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python2-installer.msi'); \
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python2'; \
+    Write-Host ('Installing into {0}...' -f $install_folder); \
+    Start-Process python2-installer.msi -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0');    
+RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON3_VERSION); \
+    Write-Host ('Downloading {0}...' -f $python_url); \
+    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
+    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python3-installer.exe'); \
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python3'; \
+    Write-Host ('Installing into {0}...' -f $install_folder); \
+    Start-Process python3-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0');     
+RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
+    Write-Host ('Downloading {0}...' -f $node_url); \
+    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
+    (New-Object System.Net.WebClient).DownloadFile($node_url, '/tmp/nodejs-installer.msi'); \
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'node'; \
+    Write-Host ('Installing into {0}...' -f $install_folder); \
+    Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); 
+RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0}/dotnet-sdk-{0}-win-x64.zip' -f $env:DOTNETCORESDK_VERSION); \
+    Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
+    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
+    (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk.zip'); \
+    $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'dotnetcoresdk'; \
+    Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
+    Expand-Archive dotnetcoresdk.zip -DestinationPath $unpack_folder; 
+RUN $docker_url = ('https://download.docker.com/win/static/stable/x86_64/docker-{0}-ce.zip'  -f $env:DOCKER_VERSION);\
+    (New-Object System.Net.WebClient).DownloadFile($docker_url, '/tmp/docker.zip'); \
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath ''; \
+    Expand-Archive -Path .\docker.zip -DestinationPath $install_folder; \
+    Remove-Item ('{0}\docker\dockerd.exe' -f $env:DESTINATION_FOLDER)
+    
+FROM microsoft/nanoserver:1709
+RUN mkdir c:\\tools 
+COPY --from=base ["tools/", "/tools"]
+USER ContainerAdministrator
+RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python3;C:\tools\python3\Scripts;c:\tools\docker\;"
+USER ContainerUser
+RUN python -m pip install --upgrade pip
+RUN pip install azure-cli
+RUN npm i -g iothub-explorer 
+RUN npm i -g tree-kill
+RUN az extension add --name azure-cli-iot-ext
+RUN pip --no-cache-dir install -U iotedgedev
+WORKDIR /home/iotedge
+COPY install-dev.bat /scripts/install-dev.bat