From ebf2565f41916f1e8f19f7860c370940cb8359e4 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Mon, 2 Apr 2018 14:26:41 -0700
Subject: [PATCH 01/44] added initial support for windows containers

---
 docker/windows/Dockerfile      | 45 ++++++++++++++++++++++++++++++++++
 docker/windows/install-dev.bat |  4 +++
 2 files changed, 49 insertions(+)
 create mode 100644 docker/windows/Dockerfile
 create mode 100644 docker/windows/install-dev.bat

diff --git a/docker/windows/Dockerfile b/docker/windows/Dockerfile
new file mode 100644
index 0000000..4625e50
--- /dev/null
+++ b/docker/windows/Dockerfile
@@ -0,0 +1,45 @@
+FROM microsoft/windowsservercore:1709
+
+SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
+
+ENV PYTHON_VERSION 3.6.5
+ENV NODEJS_VERSION 8.11.1
+ENV DOTNETCORESDK_VERSION 2.1.101
+
+WORKDIR /tmp
+
+RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}.exe' -f $env:PYTHON_VERSION); \
+    Write-Host ('Downloading {0}...' -f $python_url); \
+    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python-installer.exe'); \
+    Write-Host ('Installing Python...'); \
+    Start-Process python-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir=C:\Python3', 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); \
+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
+
+RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
+    Write-Host ('Downloading {0}...' -f $node_url); \
+    (New-Object System.Net.WebClient).DownloadFile($node_url, '/tmp/nodejs-installer.msi'); \
+    Write-Host ('Installing Node...'); \
+    Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q'); \
+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
+
+RUN Write-Host ('Downloading Azure CLI...'); \
+    Invoke-WebRequest 'https://aka.ms/installazurecliwindows' -OutFile azure-cli-installer.msi; \
+    Write-Host ('Installing Azure CLI...'); \
+    Start-Process azure-cli-installer.msi -Wait -ArgumentList @('/quiet', '/q');  \
+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
+
+RUN $dotnetcoresdk_url = ('https://download.microsoft.com/download/D/C/F/DCFA73BE-93CE-4DA0-AB76-98972FD6E475/dotnet-sdk-{0}-win-x64.exe' -f $env:DOTNETCORESDK_VERSION); \
+    Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
+    (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk-installer.exe'); \
+    Write-Host ('Installing .NET Core SDK...'); \
+    Start-Process dotnetcoresdk-installer.exe -Wait -ArgumentList @('/quiet'); \
+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
+
+RUN Write-Host ('Installing AZ CLI IOT Extension...'); \
+    az extension add --name azure-cli-iot-ext
+
+RUN Start-Process npm -Wait -ArgumentList @('i', '-g', 'iothub-explorer'); 
+
+WORKDIR /iotedge
+
+COPY install-dev.bat /scripts/install-dev.bat
\ No newline at end of file
diff --git a/docker/windows/install-dev.bat b/docker/windows/install-dev.bat
new file mode 100644
index 0000000..52844b1
--- /dev/null
+++ b/docker/windows/install-dev.bat
@@ -0,0 +1,4 @@
+cd /home/iotedge/tool
+pip install -r requirements_dev.txt
+pip install -e .
+cd /home/iotedge
\ No newline at end of file

From ea6b8495cf2226019e5a3dd6de6623f465263536 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Wed, 4 Apr 2018 14:34:57 -0700
Subject: [PATCH 02/44] initial support for nanoserver

---
 docker/windows/Dockerfile | 50 +++++++++++++++++++++++----------------
 1 file changed, 29 insertions(+), 21 deletions(-)

diff --git a/docker/windows/Dockerfile b/docker/windows/Dockerfile
index 4625e50..6ab4ffd 100644
--- a/docker/windows/Dockerfile
+++ b/docker/windows/Dockerfile
@@ -1,45 +1,53 @@
-FROM microsoft/windowsservercore:1709
+FROM microsoft/windowsservercore:1709 AS base
 
 SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
 
 ENV PYTHON_VERSION 3.6.5
 ENV NODEJS_VERSION 8.11.1
-ENV DOTNETCORESDK_VERSION 2.1.101
+ENV DOTNETCORESDK_VERSION 2.1.4
+ENV DESTINATION_FOLDER C:\\tools
 
 WORKDIR /tmp
 
 RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}.exe' -f $env:PYTHON_VERSION); \
     Write-Host ('Downloading {0}...' -f $python_url); \
     (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python-installer.exe'); \
-    Write-Host ('Installing Python...'); \
-    Start-Process python-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir=C:\Python3', 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); \
-    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
+    Write-Host ('Installing into {0}...' -f $install_folder); \
+    Start-Process python-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); 
 
 RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
     Write-Host ('Downloading {0}...' -f $node_url); \
     (New-Object System.Net.WebClient).DownloadFile($node_url, '/tmp/nodejs-installer.msi'); \
-    Write-Host ('Installing Node...'); \
-    Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q'); \
-    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'node'; \
+    Write-Host ('Installing into {0}...' -f $install_folder); \
+    Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); 
 
 RUN Write-Host ('Downloading Azure CLI...'); \
     Invoke-WebRequest 'https://aka.ms/installazurecliwindows' -OutFile azure-cli-installer.msi; \
-    Write-Host ('Installing Azure CLI...'); \
-    Start-Process azure-cli-installer.msi -Wait -ArgumentList @('/quiet', '/q');  \
-    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
+    # $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'azcli'; \
+    Write-Host ('Installing...'); \
+    Start-Process azure-cli-installer.msi -Wait -ArgumentList @('/quiet', '/q');     
+# Start-Process azure-cli-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); # Seems that InstallDir is not used at all
 
-RUN $dotnetcoresdk_url = ('https://download.microsoft.com/download/D/C/F/DCFA73BE-93CE-4DA0-AB76-98972FD6E475/dotnet-sdk-{0}-win-x64.exe' -f $env:DOTNETCORESDK_VERSION); \
+RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0}/dotnet-sdk-{0}-win-x64.zip' -f $env:DOTNETCORESDK_VERSION); \
     Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
-    (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk-installer.exe'); \
-    Write-Host ('Installing .NET Core SDK...'); \
-    Start-Process dotnetcoresdk-installer.exe -Wait -ArgumentList @('/quiet'); \
-    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);
+    (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk.zip'); \
+    Write-Host ('Unpacking .NET Core SDK...'); \
+    Expand-Archive dotnetcoresdk.zip -DestinationPath ..\\tools\\dotnet; 
 
-RUN Write-Host ('Installing AZ CLI IOT Extension...'); \
-    az extension add --name azure-cli-iot-ext
+FROM microsoft/nanoserver:1709
 
-RUN Start-Process npm -Wait -ArgumentList @('i', '-g', 'iothub-explorer'); 
+RUN mkdir c:\\tools 
+RUN mkdir c:\\tools\\azure
 
-WORKDIR /iotedge
+COPY --from=base ["tools", "/tools"]
+COPY --from=base ["/Program Files (x86)/Microsoft SDKs/Azure/", "/tools/azure"]
 
-COPY install-dev.bat /scripts/install-dev.bat
\ No newline at end of file
+USER ContainerAdministrator 
+RUN setx /M PATH "%PATH%;C:\\tools\\dotnet;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\azure\\CLI2\\wbin"
+USER ContainerUser
+
+RUN npm -i -g iothub-explorer 
+
+RUN az extension add --name azure-cli-iot-ext

From 6a92fbe9910574e148eaa09636f54914ae573e22 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Wed, 4 Apr 2018 14:36:34 -0700
Subject: [PATCH 03/44] corrected az cli path

---
 docker/windows/Dockerfile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/docker/windows/Dockerfile b/docker/windows/Dockerfile
index 6ab4ffd..6c369bd 100644
--- a/docker/windows/Dockerfile
+++ b/docker/windows/Dockerfile
@@ -45,7 +45,7 @@ COPY --from=base ["tools", "/tools"]
 COPY --from=base ["/Program Files (x86)/Microsoft SDKs/Azure/", "/tools/azure"]
 
 USER ContainerAdministrator 
-RUN setx /M PATH "%PATH%;C:\\tools\\dotnet;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\azure\\CLI2\\wbin"
+RUN setx /M PATH "%PATH%;C:\\tools\\dotnet;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\azure\\CLI2\\wbin\\;"
 USER ContainerUser
 
 RUN npm -i -g iothub-explorer 

From 3905ca725063c00b4ab5f62dd05f12d550b99226 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Thu, 5 Apr 2018 09:00:15 -0700
Subject: [PATCH 04/44] only az not working

---
 docker/windows/Dockerfile | 24 +++++++++++++++---------
 1 file changed, 15 insertions(+), 9 deletions(-)

diff --git a/docker/windows/Dockerfile b/docker/windows/Dockerfile
index 6c369bd..b91ceb6 100644
--- a/docker/windows/Dockerfile
+++ b/docker/windows/Dockerfile
@@ -9,7 +9,14 @@ ENV DESTINATION_FOLDER C:\\tools
 
 WORKDIR /tmp
 
-RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}.exe' -f $env:PYTHON_VERSION); \
+#RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-embed-amd64.zip' -f $env:PYTHON_VERSION); \
+#    Write-Host ('Downloading {0}...' -f $python_url); \
+#    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python.zip'); \
+#    $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
+#    Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
+#    Expand-Archive python.zip -DestinationPath $unpack_folder; 
+
+RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON_VERSION); \
     Write-Host ('Downloading {0}...' -f $python_url); \
     (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python-installer.exe'); \
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
@@ -33,21 +40,20 @@ RUN Write-Host ('Downloading Azure CLI...'); \
 RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0}/dotnet-sdk-{0}-win-x64.zip' -f $env:DOTNETCORESDK_VERSION); \
     Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
     (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk.zip'); \
-    Write-Host ('Unpacking .NET Core SDK...'); \
-    Expand-Archive dotnetcoresdk.zip -DestinationPath ..\\tools\\dotnet; 
+    $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'dotnetcoresdk'; \
+    Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
+    Expand-Archive dotnetcoresdk.zip -DestinationPath $unpack_folder; 
 
-FROM microsoft/nanoserver:1709
+FROM microsoft/nanoserver:sac2016
 
 RUN mkdir c:\\tools 
 RUN mkdir c:\\tools\\azure
 
-COPY --from=base ["tools", "/tools"]
+COPY --from=base ["tools/", "/tools"]
 COPY --from=base ["/Program Files (x86)/Microsoft SDKs/Azure/", "/tools/azure"]
 
-USER ContainerAdministrator 
-RUN setx /M PATH "%PATH%;C:\\tools\\dotnet;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\azure\\CLI2\\wbin\\;"
-USER ContainerUser
+RUN setx /M PATH "%PATH%;C:\\tools\\dotnetcoresdk;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\azure\\CLI2\\wbin\\;"
 
-RUN npm -i -g iothub-explorer 
+RUN npm i -g iothub-explorer 
 
 RUN az extension add --name azure-cli-iot-ext

From 5bf51fc17793ec5af1e81c3d827e96e11da6c827 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 13 Apr 2018 12:01:35 -0700
Subject: [PATCH 05/44] all dependencies correctly working

---
 docker/windows/Dockerfile | 36 ++++++++++++++++++------------------
 docker/windows/run.ps1    |  9 +++++++++
 2 files changed, 27 insertions(+), 18 deletions(-)
 create mode 100644 docker/windows/run.ps1

diff --git a/docker/windows/Dockerfile b/docker/windows/Dockerfile
index b91ceb6..c2be223 100644
--- a/docker/windows/Dockerfile
+++ b/docker/windows/Dockerfile
@@ -5,19 +5,14 @@ SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPref
 ENV PYTHON_VERSION 3.6.5
 ENV NODEJS_VERSION 8.11.1
 ENV DOTNETCORESDK_VERSION 2.1.4
+ENV DOCKER_VERSION 17.09.0
 ENV DESTINATION_FOLDER C:\\tools
 
 WORKDIR /tmp
 
-#RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-embed-amd64.zip' -f $env:PYTHON_VERSION); \
-#    Write-Host ('Downloading {0}...' -f $python_url); \
-#    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python.zip'); \
-#    $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
-#    Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
-#    Expand-Archive python.zip -DestinationPath $unpack_folder; 
-
 RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON_VERSION); \
     Write-Host ('Downloading {0}...' -f $python_url); \
+    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
     (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python-installer.exe'); \
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
     Write-Host ('Installing into {0}...' -f $install_folder); \
@@ -25,34 +20,39 @@ RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe'
 
 RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
     Write-Host ('Downloading {0}...' -f $node_url); \
+    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
     (New-Object System.Net.WebClient).DownloadFile($node_url, '/tmp/nodejs-installer.msi'); \
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'node'; \
     Write-Host ('Installing into {0}...' -f $install_folder); \
     Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); 
 
-RUN Write-Host ('Downloading Azure CLI...'); \
-    Invoke-WebRequest 'https://aka.ms/installazurecliwindows' -OutFile azure-cli-installer.msi; \
-    # $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'azcli'; \
-    Write-Host ('Installing...'); \
-    Start-Process azure-cli-installer.msi -Wait -ArgumentList @('/quiet', '/q');     
-# Start-Process azure-cli-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); # Seems that InstallDir is not used at all
-
 RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0}/dotnet-sdk-{0}-win-x64.zip' -f $env:DOTNETCORESDK_VERSION); \
     Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
+    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
     (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk.zip'); \
     $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'dotnetcoresdk'; \
     Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
     Expand-Archive dotnetcoresdk.zip -DestinationPath $unpack_folder; 
 
-FROM microsoft/nanoserver:sac2016
+RUN $docker_url = ('https://download.docker.com/win/static/stable/x86_64/docker-{0}-ce.zip'  -f $env:DOCKER_VERSION);\
+    (New-Object System.Net.WebClient).DownloadFile($docker_url, '/tmp/docker.zip'); \
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath ''; \
+    Expand-Archive -Path .\docker.zip -DestinationPath $install_folder; \
+    Remove-Item ('{0}\docker\dockerd.exe' -f $env:DESTINATION_FOLDER)
+    
+FROM microsoft/nanoserver:1709
 
 RUN mkdir c:\\tools 
-RUN mkdir c:\\tools\\azure
 
 COPY --from=base ["tools/", "/tools"]
-COPY --from=base ["/Program Files (x86)/Microsoft SDKs/Azure/", "/tools/azure"]
 
-RUN setx /M PATH "%PATH%;C:\\tools\\dotnetcoresdk;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\azure\\CLI2\\wbin\\;"
+USER ContainerAdministrator
+
+RUN setx /M PATH "%PATH%;C:\\tools\\dotnetcoresdk;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\docker\\;"
+
+USER ContainerUser
+
+RUN pip install azure-cli
 
 RUN npm i -g iothub-explorer 
 
diff --git a/docker/windows/run.ps1 b/docker/windows/run.ps1
new file mode 100644
index 0000000..519e218
--- /dev/null
+++ b/docker/windows/run.ps1
@@ -0,0 +1,9 @@
+if ((Get-NetFirewallRule -DisplayName "Docker Proxy 2" -ErrorAction Ignore) -ne $null)
+{
+    New-NetFirewallRule -DisplayName "Docker Proxy" -LocalPort 2375 -Action Allow -Protocol TCP
+}
+
+$docker_gateway = (Get-NetIPAddress -InterfaceAlias 'vEthernet (nat) 2' -AddressFamily IPv4 | Select-Object IPAddress).IPAddress
+$docker_host ="tcp://{0}:2375" -f $docker_gateway
+
+docker run -it -e DOCKER_HOST=$docker_host iotdevedgecli:nanoserver
\ No newline at end of file

From 1a64cb3e74c81220c8e89028b38ff9ff069aa6b9 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 13 Apr 2018 12:15:34 -0700
Subject: [PATCH 06/44] added required pip packages

---
 docker/windows/Dockerfile | 2 ++
 docker/windows/run.ps1    | 2 +-
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/docker/windows/Dockerfile b/docker/windows/Dockerfile
index c2be223..4e8af64 100644
--- a/docker/windows/Dockerfile
+++ b/docker/windows/Dockerfile
@@ -57,3 +57,5 @@ RUN pip install azure-cli
 RUN npm i -g iothub-explorer 
 
 RUN az extension add --name azure-cli-iot-ext
+
+RUN pip install bumpversion==0.5.3 wheel==0.29.0 watchdog==0.8.3 flake8==2.6.0 tox==2.3.1 coverage==4.1 Sphinx==1.4.8 cryptography PyYAML==3.11 iotedgedev
diff --git a/docker/windows/run.ps1 b/docker/windows/run.ps1
index 519e218..ac187eb 100644
--- a/docker/windows/run.ps1
+++ b/docker/windows/run.ps1
@@ -1,4 +1,4 @@
-if ((Get-NetFirewallRule -DisplayName "Docker Proxy 2" -ErrorAction Ignore) -ne $null)
+if ((Get-NetFirewallRule -DisplayName "Docker Proxy" -ErrorAction Ignore) -eq $null)
 {
     New-NetFirewallRule -DisplayName "Docker Proxy" -LocalPort 2375 -Action Allow -Protocol TCP
 }

From dd3afa5059c82e48feb02d0584b9b9579e6eb5d9 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Mon, 16 Apr 2018 13:41:13 -0700
Subject: [PATCH 07/44] removed unneeded file

---
 docker/windows/install-dev.bat | 4 ----
 1 file changed, 4 deletions(-)
 delete mode 100644 docker/windows/install-dev.bat

diff --git a/docker/windows/install-dev.bat b/docker/windows/install-dev.bat
deleted file mode 100644
index 52844b1..0000000
--- a/docker/windows/install-dev.bat
+++ /dev/null
@@ -1,4 +0,0 @@
-cd /home/iotedge/tool
-pip install -r requirements_dev.txt
-pip install -e .
-cd /home/iotedge
\ No newline at end of file

From d06cd71cdbca1d0bfacb52f8923d1c68e1bbcf80 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@lls-MacBook-Pro.local>
Date: Mon, 16 Apr 2018 14:55:26 -0700
Subject: [PATCH 08/44] removed external dependencies

---
 docker/linux/Dockerfile     | 27 +++++++++++++++++++++++++--
 docker/linux/Dockerfile.org |  2 ++
 docker/linux/build.sh       |  5 ++---
 3 files changed, 29 insertions(+), 5 deletions(-)
 create mode 100644 docker/linux/Dockerfile.org

diff --git a/docker/linux/Dockerfile b/docker/linux/Dockerfile
index cb7ecdd..908c6d9 100644
--- a/docker/linux/Dockerfile
+++ b/docker/linux/Dockerfile
@@ -1,2 +1,25 @@
-FROM jongallant/iotedgedev-deps:${VERSION}-linux
-RUN pip --no-cache-dir install -U iotedgedev
\ No newline at end of file
+FROM ubuntu:16.04
+ENV DEBIAN_FRONTEND noninteractive
+RUN apt-get update && \
+    apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip libltdl-dev docker.io && \ 
+    curl -sL https://deb.nodesource.com/setup_8.x | bash - && \
+    apt-get install -y nodejs && \
+    curl -O https://bootstrap.pypa.io/get-pip.py && python get-pip.py && \ 
+    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg && \ 
+    mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg && \ 
+    sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" > /etc/apt/sources.list.d/dotnetdev.list' && \ 
+    apt-get update && \ 
+    apt-get install -y dotnet-sdk-2.1.3 && \
+    AZ_REPO=$(lsb_release -cs) && \
+    echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
+    tee /etc/apt/sources.list.d/azure-cli.list && \
+    apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893 && \   
+    apt-get update && apt-get install azure-cli && \
+    az extension add --name azure-cli-iot-ext && \
+    npm i -g iothub-explorer && \
+    rm -rf /var/lib/apt/lists/*
+RUN apt-get update && \
+    apt-get install -y --no-install-recommends python-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev
+WORKDIR /home/iotedge
+RUN pip install bumpversion==0.5.3 wheel==0.29.0 watchdog==0.8.3 flake8==2.6.0 tox==2.3.1 coverage==4.1 Sphinx==1.4.8 cryptography PyYAML==3.11 iotedgedev
+ENV DEBIAN_FRONTEND teletype
diff --git a/docker/linux/Dockerfile.org b/docker/linux/Dockerfile.org
new file mode 100644
index 0000000..cb7ecdd
--- /dev/null
+++ b/docker/linux/Dockerfile.org
@@ -0,0 +1,2 @@
+FROM jongallant/iotedgedev-deps:${VERSION}-linux
+RUN pip --no-cache-dir install -U iotedgedev
\ No newline at end of file
diff --git a/docker/linux/build.sh b/docker/linux/build.sh
index 924d630..290e1c6 100644
--- a/docker/linux/build.sh
+++ b/docker/linux/build.sh
@@ -1,4 +1,3 @@
-export VERSION=$1
-docker build -f Dockerfile.deps -t jongallant/iotedgedev-deps:$1 -t jongallant/iotedgedev-deps:$1-linux -t jongallant/iotedgedev-deps:latest -t jongallant/iotedgedev-deps:latest-linux   . 
+docker build . -f Dockerfile.deps -t yorek/iotedgedev-deps:ubuntu
 cat Dockerfile | envsubst > Dockerfile.expanded
-docker build -f Dockerfile.expanded -t jongallant/iotedgedev:$1 -t jongallant/iotedgedev:$1-linux -t jongallant/iotedgedev:latest -t jongallant/iotedgedev:latest-linux .
+docker build . -f Dockerfile.expanded -t yorek/iotedgedev:ubuntu

From b8fcccaefc02207d979cda80381cc3e38bece506 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Wed, 18 Apr 2018 11:20:32 -0700
Subject: [PATCH 09/44] completed support for nanoserver

---
 docker/linux/Dockerfile.org    |  2 --
 docker/windows/Dockerfile      | 23 +++++------------------
 docker/windows/build.sh        |  3 +++
 docker/windows/install-dev.bat |  4 ++++
 docker/windows/run.ps1         |  2 +-
 docker/windows/run_dev.ps1     | 12 ++++++++++++
 6 files changed, 25 insertions(+), 21 deletions(-)
 delete mode 100644 docker/linux/Dockerfile.org
 create mode 100644 docker/windows/build.sh
 create mode 100644 docker/windows/install-dev.bat
 create mode 100644 docker/windows/run_dev.ps1

diff --git a/docker/linux/Dockerfile.org b/docker/linux/Dockerfile.org
deleted file mode 100644
index cb7ecdd..0000000
--- a/docker/linux/Dockerfile.org
+++ /dev/null
@@ -1,2 +0,0 @@
-FROM jongallant/iotedgedev-deps:${VERSION}-linux
-RUN pip --no-cache-dir install -U iotedgedev
\ No newline at end of file
diff --git a/docker/windows/Dockerfile b/docker/windows/Dockerfile
index 4e8af64..1935626 100644
--- a/docker/windows/Dockerfile
+++ b/docker/windows/Dockerfile
@@ -1,15 +1,11 @@
 FROM microsoft/windowsservercore:1709 AS base
-
 SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
-
 ENV PYTHON_VERSION 3.6.5
 ENV NODEJS_VERSION 8.11.1
 ENV DOTNETCORESDK_VERSION 2.1.4
 ENV DOCKER_VERSION 17.09.0
 ENV DESTINATION_FOLDER C:\\tools
-
 WORKDIR /tmp
-
 RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON_VERSION); \
     Write-Host ('Downloading {0}...' -f $python_url); \
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
@@ -17,7 +13,6 @@ RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe'
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
     Write-Host ('Installing into {0}...' -f $install_folder); \
     Start-Process python-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); 
-
 RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
     Write-Host ('Downloading {0}...' -f $node_url); \
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
@@ -25,7 +20,6 @@ RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'node'; \
     Write-Host ('Installing into {0}...' -f $install_folder); \
     Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); 
-
 RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0}/dotnet-sdk-{0}-win-x64.zip' -f $env:DOTNETCORESDK_VERSION); \
     Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
@@ -33,7 +27,6 @@ RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0
     $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'dotnetcoresdk'; \
     Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
     Expand-Archive dotnetcoresdk.zip -DestinationPath $unpack_folder; 
-
 RUN $docker_url = ('https://download.docker.com/win/static/stable/x86_64/docker-{0}-ce.zip'  -f $env:DOCKER_VERSION);\
     (New-Object System.Net.WebClient).DownloadFile($docker_url, '/tmp/docker.zip'); \
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath ''; \
@@ -41,21 +34,15 @@ RUN $docker_url = ('https://download.docker.com/win/static/stable/x86_64/docker-
     Remove-Item ('{0}\docker\dockerd.exe' -f $env:DESTINATION_FOLDER)
     
 FROM microsoft/nanoserver:1709
-
 RUN mkdir c:\\tools 
-
 COPY --from=base ["tools/", "/tools"]
-
 USER ContainerAdministrator
-
-RUN setx /M PATH "%PATH%;C:\\tools\\dotnetcoresdk;C:\\tools\\node\\;C:\tools\\python\\;C:\\tools\\python\\Scripts\\;c:\\tools\\docker\\;"
-
+RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python;C:\tools\python\Scripts;c:\tools\docker\;"
 USER ContainerUser
-
+RUN python -m pip install --upgrade pip
 RUN pip install azure-cli
-
 RUN npm i -g iothub-explorer 
-
 RUN az extension add --name azure-cli-iot-ext
-
-RUN pip install bumpversion==0.5.3 wheel==0.29.0 watchdog==0.8.3 flake8==2.6.0 tox==2.3.1 coverage==4.1 Sphinx==1.4.8 cryptography PyYAML==3.11 iotedgedev
+RUN pip --no-cache-dir install -U iotedgedev
+WORKDIR /home/iotedge
+COPY install-dev.bat /scripts/install-dev.bat
\ No newline at end of file
diff --git a/docker/windows/build.sh b/docker/windows/build.sh
new file mode 100644
index 0000000..9a3097a
--- /dev/null
+++ b/docker/windows/build.sh
@@ -0,0 +1,3 @@
+#!/bin/bash
+export VERSION=$1
+docker build -f Dockerfile -t microsoft/iotedgedev:$1 -t microsoft/iotedgedev:$1-nanoserver -t microsoft/iotedgedev:latest-nanoserver .
diff --git a/docker/windows/install-dev.bat b/docker/windows/install-dev.bat
new file mode 100644
index 0000000..52844b1
--- /dev/null
+++ b/docker/windows/install-dev.bat
@@ -0,0 +1,4 @@
+cd /home/iotedge/tool
+pip install -r requirements_dev.txt
+pip install -e .
+cd /home/iotedge
\ No newline at end of file
diff --git a/docker/windows/run.ps1 b/docker/windows/run.ps1
index ac187eb..4ff403a 100644
--- a/docker/windows/run.ps1
+++ b/docker/windows/run.ps1
@@ -6,4 +6,4 @@ if ((Get-NetFirewallRule -DisplayName "Docker Proxy" -ErrorAction Ignore) -eq $n
 $docker_gateway = (Get-NetIPAddress -InterfaceAlias 'vEthernet (nat) 2' -AddressFamily IPv4 | Select-Object IPAddress).IPAddress
 $docker_host ="tcp://{0}:2375" -f $docker_gateway
 
-docker run -it -e DOCKER_HOST=$docker_host iotdevedgecli:nanoserver
\ No newline at end of file
+docker run -it -e DOCKER_HOST=$docker_host microsoft/iotedgedev:latest-nanoserver 
\ No newline at end of file
diff --git a/docker/windows/run_dev.ps1 b/docker/windows/run_dev.ps1
new file mode 100644
index 0000000..4da7cb4
--- /dev/null
+++ b/docker/windows/run_dev.ps1
@@ -0,0 +1,12 @@
+if ((Get-NetFirewallRule -DisplayName "Docker Proxy" -ErrorAction Ignore) -eq $null)
+{
+    New-NetFirewallRule -DisplayName "Docker Proxy" -LocalPort 2375 -Action Allow -Protocol TCP
+}
+
+$docker_gateway = (Get-NetIPAddress -InterfaceAlias 'vEthernet (nat) 2' -AddressFamily IPv4 | Select-Object IPAddress).IPAddress
+$docker_host ="tcp://{0}:2375" -f $docker_gateway
+
+$source_folder = Get-Location | Split-Path | Split-Path 
+
+docker run -it -e DOCKER_HOST=${docker_host} -v  c:/temp/iotedge/tool:c:/home/iotedge/tool microsoft/iotedgedev:latest-nanoserver 
+

From f84d6b92606bbdd985c623837109c82d147052ae Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Thu, 19 Apr 2018 15:42:48 -0700
Subject: [PATCH 10/44] fixed all issued mentioned in PR comments

---
 docker/build.sh            | 73 ++++++++++++++++++++++++++++++++++++++
 docker/deps.txt            |  5 +++
 docker/linux/Dockerfile    |  5 +--
 docker/linux/build.sh      |  2 --
 docker/windows/Dockerfile  |  3 +-
 docker/windows/build.sh    |  3 --
 docker/windows/run.ps1     | 25 +++++++++++--
 docker/windows/run_dev.ps1 | 12 -------
 8 files changed, 106 insertions(+), 22 deletions(-)
 create mode 100644 docker/build.sh
 create mode 100644 docker/deps.txt
 delete mode 100644 docker/linux/build.sh
 delete mode 100644 docker/windows/build.sh
 delete mode 100644 docker/windows/run_dev.ps1

diff --git a/docker/build.sh b/docker/build.sh
new file mode 100644
index 0000000..fdfe881
--- /dev/null
+++ b/docker/build.sh
@@ -0,0 +1,73 @@
+#!/bin/bash
+
+# read IoTEdgeDev version from python __init__ file
+export VERSION=$(cat ../iotedgedev/__init__.py | grep '__version__' | grep -oP "'\K[^']+")
+
+PYTHON2="2.7.14"
+PYTHON3="3.6.5"
+
+function switch_docker
+{
+    echo "===== Switching Docker engine"
+    echo "===== From: " $(docker version --format '{{.Server.Os}}')
+    /c/Program\ Files/Docker/Docker/DockerCli.exe -SwitchDaemon
+    echo "===== To: " $(docker version --format '{{.Server.Os}}')
+}
+
+function get_docker_mode
+{
+    echo $(docker version --format '{{.Server.Os}}')
+}
+
+function check_docker_expected_mode 
+{
+    local mode=$(get_docker_mode)    
+
+    if [ $mode != $1 ]; then
+        echo "===== ERROR: docker is not in expected mode: '$1'"
+        exit 1
+    fi    
+}
+
+function build_linux
+{
+    echo "===== Building Linux Based images"
+
+    check_docker_expected_mode "linux"
+
+    cd linux
+    docker build -f Dockerfile -t microsoft/iotedgedev:$VERSION-linux -t microsoft/iotedgedev:latest-linux .
+
+    cd ..
+}
+
+function build_windows
+{
+    echo "===== Building Windows Based images"
+    
+    check_docker_expected_mode "windows"
+
+    cd windows
+
+    echo "===== Building Windows Based image (Python $PYTHON3)"
+    docker build --build-arg PYTHON_VERSION=$PYTHON3 -f Dockerfile -t microsoft/iotedgedev:$VERSION-windows -t microsoft/iotedgedev:latest-windows -t microsoft/iotedgedev:$VERSION-windows-py3 -t microsoft/iotedgedev:latest-windows-py3 .
+
+    cd ..
+}
+
+mode=$(get_docker_mode)
+echo "===== Docker is in '$mode' container mode"
+if [ $mode = "windows" ]; then
+    # Docker is in Windows Container mode
+    build_windows
+    switch_docker
+    build_linux
+    switch_docker
+else
+    # Docker is in Linux Container mode
+    build_linux
+    switch_docker
+    build_windows
+    switch_docker
+fi
+
diff --git a/docker/deps.txt b/docker/deps.txt
new file mode 100644
index 0000000..2d9b791
--- /dev/null
+++ b/docker/deps.txt
@@ -0,0 +1,5 @@
+PYTHON2_VERSION=3.6.5
+PYTHON3_VERSION=2.7.14
+NODEJS_VERSION=8.11.1
+DOTNETCORESDK_VERSION=2.1.4
+DOCKER_VERSION=17.09.0
diff --git a/docker/linux/Dockerfile b/docker/linux/Dockerfile
index 9151dac..4a99f55 100644
--- a/docker/linux/Dockerfile
+++ b/docker/linux/Dockerfile
@@ -1,5 +1,6 @@
 FROM ubuntu:16.04
 ENV DEBIAN_FRONTEND noninteractive
+ENV DOTNETCORESDK_VERSION 2.1.4
 RUN apt-get update && \
     apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip libltdl-dev docker.io && \ 
     curl -sL https://deb.nodesource.com/setup_8.x | bash - && \
@@ -9,7 +10,7 @@ RUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > mic
     mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg && \ 
     sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" > /etc/apt/sources.list.d/dotnetdev.list' && \ 
     apt-get update && \ 
-    apt-get install -y dotnet-sdk-2.1.3
+    apt-get install -y dotnet-sdk-${DOTNETCORESDK_VERSION}
 RUN AZ_REPO=$(lsb_release -cs) && \
     echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
     tee /etc/apt/sources.list.d/azure-cli.list && \
@@ -24,4 +25,4 @@ RUN pip --no-cache-dir install -U iotedgedev
 WORKDIR /home/iotedge
 COPY install-dev.sh /scripts/install-dev.sh
 RUN sed -i 's/\r//' /scripts/install-dev.sh
-ENV DEBIAN_FRONTEND teletype
+ENV DEBIAN_FRONTEND teletype
\ No newline at end of file
diff --git a/docker/linux/build.sh b/docker/linux/build.sh
deleted file mode 100644
index fa4d20f..0000000
--- a/docker/linux/build.sh
+++ /dev/null
@@ -1,2 +0,0 @@
-export VERSION=$1
-docker build -f Dockerfile -t microsoft/iotedgedev:$1 -t microsoft/iotedgedev:$1-linux -t microsoft/iotedgedev:latest -t microsoft/iotedgedev:latest-linux .
diff --git a/docker/windows/Dockerfile b/docker/windows/Dockerfile
index 1935626..ed38dbb 100644
--- a/docker/windows/Dockerfile
+++ b/docker/windows/Dockerfile
@@ -1,6 +1,6 @@
 FROM microsoft/windowsservercore:1709 AS base
 SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
-ENV PYTHON_VERSION 3.6.5
+ARG PYTHON_VERSION 
 ENV NODEJS_VERSION 8.11.1
 ENV DOTNETCORESDK_VERSION 2.1.4
 ENV DOCKER_VERSION 17.09.0
@@ -42,6 +42,7 @@ USER ContainerUser
 RUN python -m pip install --upgrade pip
 RUN pip install azure-cli
 RUN npm i -g iothub-explorer 
+RUN npm i -g tree-kill
 RUN az extension add --name azure-cli-iot-ext
 RUN pip --no-cache-dir install -U iotedgedev
 WORKDIR /home/iotedge
diff --git a/docker/windows/build.sh b/docker/windows/build.sh
deleted file mode 100644
index 9a3097a..0000000
--- a/docker/windows/build.sh
+++ /dev/null
@@ -1,3 +0,0 @@
-#!/bin/bash
-export VERSION=$1
-docker build -f Dockerfile -t microsoft/iotedgedev:$1 -t microsoft/iotedgedev:$1-nanoserver -t microsoft/iotedgedev:latest-nanoserver .
diff --git a/docker/windows/run.ps1 b/docker/windows/run.ps1
index 4ff403a..d8171a3 100644
--- a/docker/windows/run.ps1
+++ b/docker/windows/run.ps1
@@ -1,9 +1,30 @@
+param (
+    [string]$interface = 'vEthernet (nat'    
+ )
+
+$ErrorActionPreference = "Stop"
+ 
+#
+# NOTE
+# Make sure option "Expose daemon on tcp://localhost:2375 without TLS" is checked in Docker
+# and also make sure that 
+# "hosts": [ "tcp://0.0.0.0:2375" ]
+# is added to your 
+# C:\ProgramData\Docker\config\deamon.json
+# file
+
+#  Make sure firewall allows comminication via TCP 2375
 if ((Get-NetFirewallRule -DisplayName "Docker Proxy" -ErrorAction Ignore) -eq $null)
 {
     New-NetFirewallRule -DisplayName "Docker Proxy" -LocalPort 2375 -Action Allow -Protocol TCP
 }
 
-$docker_gateway = (Get-NetIPAddress -InterfaceAlias 'vEthernet (nat) 2' -AddressFamily IPv4 | Select-Object IPAddress).IPAddress
+# Find IP Address used by Docker NAT
+$docker_gateway = (Get-NetIPAddress -InterfaceAlias $interface -AddressFamily IPv4 | Select-Object IPAddress).IPAddress
 $docker_host ="tcp://{0}:2375" -f $docker_gateway
 
-docker run -it -e DOCKER_HOST=$docker_host microsoft/iotedgedev:latest-nanoserver 
\ No newline at end of file
+# Get IoTEdgeDev source folder
+$source_folder = Get-Location | Split-Path | Split-Path 
+
+# Run Docker Container
+docker run -it -e DOCKER_HOST=${docker_host} -v ${source_folder}:c:/home/iotedge/tool microsoft/iotedgedev:latest-windows
\ No newline at end of file
diff --git a/docker/windows/run_dev.ps1 b/docker/windows/run_dev.ps1
deleted file mode 100644
index 4da7cb4..0000000
--- a/docker/windows/run_dev.ps1
+++ /dev/null
@@ -1,12 +0,0 @@
-if ((Get-NetFirewallRule -DisplayName "Docker Proxy" -ErrorAction Ignore) -eq $null)
-{
-    New-NetFirewallRule -DisplayName "Docker Proxy" -LocalPort 2375 -Action Allow -Protocol TCP
-}
-
-$docker_gateway = (Get-NetIPAddress -InterfaceAlias 'vEthernet (nat) 2' -AddressFamily IPv4 | Select-Object IPAddress).IPAddress
-$docker_host ="tcp://{0}:2375" -f $docker_gateway
-
-$source_folder = Get-Location | Split-Path | Split-Path 
-
-docker run -it -e DOCKER_HOST=${docker_host} -v  c:/temp/iotedge/tool:c:/home/iotedge/tool microsoft/iotedgedev:latest-nanoserver 
-

From e5a8be8dd2a1635c8086a05a92dace7e4fc183c6 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 20 Apr 2018 12:37:06 -0700
Subject: [PATCH 11/44] installing both python2 and python3 on nanoserver

---
 docker/build.sh           |  4 +---
 docker/deps.txt           |  4 ++--
 docker/windows/Dockerfile | 21 +++++++++++++++------
 3 files changed, 18 insertions(+), 11 deletions(-)

diff --git a/docker/build.sh b/docker/build.sh
index fdfe881..6f0b94c 100644
--- a/docker/build.sh
+++ b/docker/build.sh
@@ -48,9 +48,7 @@ function build_windows
     check_docker_expected_mode "windows"
 
     cd windows
-
-    echo "===== Building Windows Based image (Python $PYTHON3)"
-    docker build --build-arg PYTHON_VERSION=$PYTHON3 -f Dockerfile -t microsoft/iotedgedev:$VERSION-windows -t microsoft/iotedgedev:latest-windows -t microsoft/iotedgedev:$VERSION-windows-py3 -t microsoft/iotedgedev:latest-windows-py3 .
+    docker build --build-arg PYTHON2_VERSION=$PYTHON2 --build-arg PYTHON3_VERSION=$PYTHON3 -f Dockerfile -t microsoft/iotedgedev:$VERSION-windows -t microsoft/iotedgedev:latest-windows .
 
     cd ..
 }
diff --git a/docker/deps.txt b/docker/deps.txt
index 2d9b791..49f2663 100644
--- a/docker/deps.txt
+++ b/docker/deps.txt
@@ -1,5 +1,5 @@
-PYTHON2_VERSION=3.6.5
-PYTHON3_VERSION=2.7.14
+PYTHON2_VERSION=2.7.14
+PYTHON3_VERSION=3.6.5
 NODEJS_VERSION=8.11.1
 DOTNETCORESDK_VERSION=2.1.4
 DOCKER_VERSION=17.09.0
diff --git a/docker/windows/Dockerfile b/docker/windows/Dockerfile
index ed38dbb..d3b6ab6 100644
--- a/docker/windows/Dockerfile
+++ b/docker/windows/Dockerfile
@@ -1,18 +1,27 @@
 FROM microsoft/windowsservercore:1709 AS base
 SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
-ARG PYTHON_VERSION 
+ARG PYTHON2_VERSION
+ARG PYTHON3_VERSION
 ENV NODEJS_VERSION 8.11.1
 ENV DOTNETCORESDK_VERSION 2.1.4
 ENV DOCKER_VERSION 17.09.0
 ENV DESTINATION_FOLDER C:\\tools
 WORKDIR /tmp
-RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON_VERSION); \
+RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}.amd64.msi' -f $env:PYTHON2_VERSION); \
     Write-Host ('Downloading {0}...' -f $python_url); \
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
-    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python-installer.exe'); \
-    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python'; \
+    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python2-installer.msi'); \
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python2'; \
     Write-Host ('Installing into {0}...' -f $install_folder); \
-    Start-Process python-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); 
+    Start-Process python2-installer.msi -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0');    
+RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON3_VERSION); \
+    Write-Host ('Downloading {0}...' -f $python_url); \
+    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
+    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python3-installer.exe'); \
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python3'; \
+    Write-Host ('Installing into {0}...' -f $install_folder); \
+    Start-Process python3-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); \
+    Rename-Item -Path "..\tools\python3\python.exe" -NewName "python3.exe"
 RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
     Write-Host ('Downloading {0}...' -f $node_url); \
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
@@ -37,7 +46,7 @@ FROM microsoft/nanoserver:1709
 RUN mkdir c:\\tools 
 COPY --from=base ["tools/", "/tools"]
 USER ContainerAdministrator
-RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python;C:\tools\python\Scripts;c:\tools\docker\;"
+RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python2;C:\tools\python2\Scripts;c:\tools\docker\;"
 USER ContainerUser
 RUN python -m pip install --upgrade pip
 RUN pip install azure-cli

From fd5ec0f26da2d189e8a760f38701e1d8c9185b33 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 20 Apr 2018 15:43:45 -0700
Subject: [PATCH 12/44] set path to point to python3, since python2 is not
 working yet

---
 docker/windows/Dockerfile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/docker/windows/Dockerfile b/docker/windows/Dockerfile
index d3b6ab6..e76cc10 100644
--- a/docker/windows/Dockerfile
+++ b/docker/windows/Dockerfile
@@ -46,7 +46,7 @@ FROM microsoft/nanoserver:1709
 RUN mkdir c:\\tools 
 COPY --from=base ["tools/", "/tools"]
 USER ContainerAdministrator
-RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python2;C:\tools\python2\Scripts;c:\tools\docker\;"
+RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python3;C:\tools\python3\Scripts;c:\tools\docker\;"
 USER ContainerUser
 RUN python -m pip install --upgrade pip
 RUN pip install azure-cli

From d3c2a4db43213220fdc54871479c8b681b9a4a56 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 20 Apr 2018 15:44:06 -0700
Subject: [PATCH 13/44] added missing parenthesis

---
 docker/windows/run.ps1 | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/docker/windows/run.ps1 b/docker/windows/run.ps1
index d8171a3..97ac276 100644
--- a/docker/windows/run.ps1
+++ b/docker/windows/run.ps1
@@ -1,5 +1,5 @@
 param (
-    [string]$interface = 'vEthernet (nat'    
+    [string]$interface = 'vEthernet (nat)'
  )
 
 $ErrorActionPreference = "Stop"

From 6756564a252707ebf101b593b1915d6f38665435 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 20 Apr 2018 15:44:35 -0700
Subject: [PATCH 14/44] set python3 as default python

---
 docker/linux/Dockerfile | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/docker/linux/Dockerfile b/docker/linux/Dockerfile
index 4a99f55..c327ba4 100644
--- a/docker/linux/Dockerfile
+++ b/docker/linux/Dockerfile
@@ -2,10 +2,11 @@ FROM ubuntu:16.04
 ENV DEBIAN_FRONTEND noninteractive
 ENV DOTNETCORESDK_VERSION 2.1.4
 RUN apt-get update && \
-    apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip libltdl-dev docker.io && \ 
+    apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip python3-pip libltdl-dev docker.io && \ 
     curl -sL https://deb.nodesource.com/setup_8.x | bash - && \
     apt-get install -y nodejs && \
-    curl -O https://bootstrap.pypa.io/get-pip.py && python get-pip.py
+    alias python=python3 && \
+    alias pip=pip3 
 RUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg && \ 
     mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg && \ 
     sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" > /etc/apt/sources.list.d/dotnetdev.list' && \ 

From b160ff70cc88d77e17803b96a07c87d2d53eb1c6 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 20 Apr 2018 15:45:04 -0700
Subject: [PATCH 15/44] mapped folder set automatically

---
 docker/linux/run-windows.sh | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/docker/linux/run-windows.sh b/docker/linux/run-windows.sh
index 1cb6cd2..16823ff 100644
--- a/docker/linux/run-windows.sh
+++ b/docker/linux/run-windows.sh
@@ -1,2 +1,5 @@
 #!/bin/bash
-docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v c:/temp/iotedge:/iotedge microsoft/iotedgedev
\ No newline at end of file
+
+folder=$(echo $PWD | cut -d/ -f-6)
+
+docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v $folder:/iotedge microsoft/iotedgedev:latest-linux
\ No newline at end of file

From d95b728704eb936cf19d142e8bc8148bf27524ec Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 20 Apr 2018 16:27:19 -0700
Subject: [PATCH 16/44] improved build script

---
 docker/build.sh | 46 ++++++++++++++++++++++++++++++++++++----------
 1 file changed, 36 insertions(+), 10 deletions(-)

diff --git a/docker/build.sh b/docker/build.sh
index 6f0b94c..672bf7d 100644
--- a/docker/build.sh
+++ b/docker/build.sh
@@ -6,6 +6,9 @@ export VERSION=$(cat ../iotedgedev/__init__.py | grep '__version__' | grep -oP "
 PYTHON2="2.7.14"
 PYTHON3="3.6.5"
 
+build_linux=1
+build_windows=1
+
 function switch_docker
 {
     echo "===== Switching Docker engine"
@@ -53,19 +56,42 @@ function build_windows
     cd ..
 }
 
+if [ $1 = "--help" ]; then    
+    echo "Usage:"
+    echo "build.sh [linux|windows]"
+    exit 1
+fi
+
+if [ $1 = "linux" ]; then
+    build_windows=0
+    echo "===== Building Linux image only"
+fi
+
+if [ $1 = "windows" ]; then
+    build_linux=0
+    echo "===== Building Windows image only"
+fi
+
 mode=$(get_docker_mode)
 echo "===== Docker is in '$mode' container mode"
 if [ $mode = "windows" ]; then
     # Docker is in Windows Container mode
-    build_windows
-    switch_docker
-    build_linux
-    switch_docker
+    if [ $build_windows = "1" ]; then
+        build_windows
+    fi
+    if [ $build_linux = "1" ]; then
+        switch_docker
+        build_linux
+        switch_docker
+    fi
 else
     # Docker is in Linux Container mode
-    build_linux
-    switch_docker
-    build_windows
-    switch_docker
-fi
-
+    if [ $build_linux -eq "1" ]; then    
+        build_linux
+    fi
+    if [ $build_windows -eq "1" ]; then    
+        switch_docker
+        build_windows
+        switch_docker
+    fi
+fi
\ No newline at end of file

From dc52a85ad79b6a6472d7db8cd5324e3e3b0e69bf Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 20 Apr 2018 16:27:34 -0700
Subject: [PATCH 17/44] added setuptools install

---
 docker/linux/Dockerfile | 1 +
 1 file changed, 1 insertion(+)

diff --git a/docker/linux/Dockerfile b/docker/linux/Dockerfile
index c327ba4..d980d20 100644
--- a/docker/linux/Dockerfile
+++ b/docker/linux/Dockerfile
@@ -22,6 +22,7 @@ RUN az extension add --name azure-cli-iot-ext && \
     apt-get update && \
     apt-get install -y --no-install-recommends python-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev && \
     rm -rf /var/lib/apt/lists/*
+RUN pip install setuptools
 RUN pip --no-cache-dir install -U iotedgedev
 WORKDIR /home/iotedge
 COPY install-dev.sh /scripts/install-dev.sh

From f7cc5de0ea92e709ba6a6f27fd01b8a7d0f7dac8 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 20 Apr 2018 16:27:50 -0700
Subject: [PATCH 18/44] set to use latest tag

---
 docker/linux/run.sh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/docker/linux/run.sh b/docker/linux/run.sh
index 9eb79b4..9b6de9f 100644
--- a/docker/linux/run.sh
+++ b/docker/linux/run.sh
@@ -1,2 +1,2 @@
 #!/bin/bash
-docker run -it -v /var/run/docker.sock:/var/run/docker.sock microsoft/iotedgedev:$1-linux
\ No newline at end of file
+docker run -it -v /var/run/docker.sock:/var/run/docker.sock microsoft/iotedgedev:latest-linux
\ No newline at end of file

From 066c158947173ea857270f0233cef450a91dca3f Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 20 Apr 2018 16:30:14 -0700
Subject: [PATCH 19/44] added support for powershell script

---
 docker/linux/run-windows.ps1 | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 docker/linux/run-windows.ps1

diff --git a/docker/linux/run-windows.ps1 b/docker/linux/run-windows.ps1
new file mode 100644
index 0000000..b269d9e
--- /dev/null
+++ b/docker/linux/run-windows.ps1
@@ -0,0 +1,5 @@
+# Get IoTEdgeDev source folder
+$source_folder = Get-Location | Split-Path | Split-Path 
+
+# Run Docker Container
+docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v ${source_folder}:/home/iotedge/tool microsoft/iotedgedev:latest-linux
\ No newline at end of file

From f71d699971923511a28e0812f2d763ac9367f394 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 20 Apr 2018 16:46:43 -0700
Subject: [PATCH 20/44] automatically map folder

---
 docker/linux/run-windows.sh | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/docker/linux/run-windows.sh b/docker/linux/run-windows.sh
index 16823ff..e65a71c 100644
--- a/docker/linux/run-windows.sh
+++ b/docker/linux/run-windows.sh
@@ -1,5 +1,5 @@
 #!/bin/bash
 
-folder=$(echo $PWD | cut -d/ -f-6)
+folder=$(echo $PWD | cut -d/ -f-6) | sed -e 's:/c:c\::g' | sed -e 's:/:\\:g'
 
-docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v $folder:/iotedge microsoft/iotedgedev:latest-linux
\ No newline at end of file
+docker run -it -v $folder:/home/iotedge/tool microsoft/iotedgedev:latest-linux

From 27505a68cc25f0bfd75392852f42f89174ddffd2 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Fri, 20 Apr 2018 16:49:58 -0700
Subject: [PATCH 21/44] added sock mapping

---
 docker/linux/run-windows.sh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/docker/linux/run-windows.sh b/docker/linux/run-windows.sh
index e65a71c..55b9bee 100644
--- a/docker/linux/run-windows.sh
+++ b/docker/linux/run-windows.sh
@@ -2,4 +2,4 @@
 
 folder=$(echo $PWD | cut -d/ -f-6) | sed -e 's:/c:c\::g' | sed -e 's:/:\\:g'
 
-docker run -it -v $folder:/home/iotedge/tool microsoft/iotedgedev:latest-linux
+docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v $folder:/home/iotedge/tool microsoft/iotedgedev:latest-linux

From 82d020573a5466a8e482f0e5de0404bb54fbbfb6 Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Sat, 21 Apr 2018 17:52:24 -0700
Subject: [PATCH 22/44] removed pip from requirements since it may generate
 errors

---
 requirements_dev.txt | 1 -
 1 file changed, 1 deletion(-)

diff --git a/requirements_dev.txt b/requirements_dev.txt
index 9f87508..ad9d055 100644
--- a/requirements_dev.txt
+++ b/requirements_dev.txt
@@ -1,4 +1,3 @@
-pip
 bumpversion==0.5.3
 wheel==0.29.0
 watchdog==0.8.3

From c47dbb74d419b4582c058aa9d3f3f50c810c87ca Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Sat, 21 Apr 2018 17:53:01 -0700
Subject: [PATCH 23/44] ignored .backup files

---
 .gitignore | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/.gitignore b/.gitignore
index 326d8a0..a1295cf 100644
--- a/.gitignore
+++ b/.gitignore
@@ -84,4 +84,5 @@ node_modules
 
 /docker/linux/Dockerfile.expanded
 
-.pytest_cache
\ No newline at end of file
+.pytest_cache
+.backup

From cbd68636ce3594dfff9321d01455c512459278ac Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Tue, 1 May 2018 21:28:45 -0700
Subject: [PATCH 24/44] fixed spacings

---
 tox.ini | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/tox.ini b/tox.ini
index ebbefc8..a7453af 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,5 +1,5 @@
 [tox]
-envlist =  py27, py36
+envlist = py27, py36
 
 #[travis]
 #python =
@@ -12,8 +12,8 @@ envlist =  py27, py36
 #commands=flake8 iotedgedev
 
 [testenv]
-deps=pytest
-commands=pytest -s
+deps = pytest
+commands = pytest -s
 #setenv =
 #    PYTHONPATH = {toxinidir}
 

From 3f23cd166df18aa77900efbbb19ee62aa46b468a Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Tue, 1 May 2018 21:29:21 -0700
Subject: [PATCH 25/44] install modules locally

---
 package-lock.json | 1750 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 1750 insertions(+)

diff --git a/package-lock.json b/package-lock.json
index b33d6f7..44fbf70 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -4,10 +4,1760 @@
   "lockfileVersion": 1,
   "requires": true,
   "dependencies": {
+    "ajv": {
+      "version": "5.5.2",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz",
+      "integrity": "sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU=",
+      "requires": {
+        "co": "4.6.0",
+        "fast-deep-equal": "1.1.0",
+        "fast-json-stable-stringify": "2.0.0",
+        "json-schema-traverse": "0.3.1"
+      }
+    },
+    "amqp10": {
+      "version": "3.5.0",
+      "resolved": "https://registry.npmjs.org/amqp10/-/amqp10-3.5.0.tgz",
+      "integrity": "sha1-FFAfHQi51DG3++dpc+i3xkgB2DA=",
+      "requires": {
+        "bl": "1.2.2",
+        "bluebird": "3.5.1",
+        "buffer-builder": "0.2.0",
+        "debug": "2.6.9",
+        "lodash": "4.17.10",
+        "node-int64": "0.4.0",
+        "stately.js": "1.3.0"
+      }
+    },
+    "amqp10-transport-ws": {
+      "version": "0.0.5",
+      "resolved": "https://registry.npmjs.org/amqp10-transport-ws/-/amqp10-transport-ws-0.0.5.tgz",
+      "integrity": "sha1-sPgnwkrU4YFSi8uy3s63H0oTKZk=",
+      "requires": {
+        "nodejs-websocket": "1.7.1"
+      }
+    },
+    "ansi-regex": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz",
+      "integrity": "sha1-w7M6te42DYbg5ijwRorn7yfWVN8="
+    },
+    "ansi-styles": {
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-2.2.1.tgz",
+      "integrity": "sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4="
+    },
+    "asn1": {
+      "version": "0.2.3",
+      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz",
+      "integrity": "sha1-2sh4dxPJlmhJ/IGAd36+nB3fO4Y="
+    },
+    "assert-plus": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
+      "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU="
+    },
+    "async": {
+      "version": "2.6.0",
+      "resolved": "https://registry.npmjs.org/async/-/async-2.6.0.tgz",
+      "integrity": "sha512-xAfGg1/NTLBBKlHFmnd7PlmUW9KhVQIUuSrYem9xzFUZy13ScvtyGGejaae9iAVRiRq9+Cx7DPFaAAhCpyxyPw==",
+      "requires": {
+        "lodash": "4.17.10"
+      }
+    },
+    "async-limiter": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/async-limiter/-/async-limiter-1.0.0.tgz",
+      "integrity": "sha512-jp/uFnooOiO+L211eZOoSyzpOITMXx1rBITauYykG3BRYPu8h0UcxsPNB04RR5vo4Tyz3+ay17tR6JVf9qzYWg=="
+    },
+    "asynckit": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
+      "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k="
+    },
+    "aws-sign2": {
+      "version": "0.7.0",
+      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
+      "integrity": "sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg="
+    },
+    "aws4": {
+      "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.7.0.tgz",
+      "integrity": "sha512-32NDda82rhwD9/JBCCkB+MRYDp0oSvlo2IL6rQWA10PQi7tDUM3eqMSltXmY+Oyl/7N3P3qNtAlv7X0d9bI28w=="
+    },
+    "azure-event-hubs": {
+      "version": "0.0.8",
+      "resolved": "https://registry.npmjs.org/azure-event-hubs/-/azure-event-hubs-0.0.8.tgz",
+      "integrity": "sha1-MebCXbp0cj10QdZpCncDzpq1Cso=",
+      "requires": {
+        "amqp10": "3.5.0",
+        "azure-iot-common": "1.1.3",
+        "bluebird": "3.5.1",
+        "uuid": "3.2.1"
+      },
+      "dependencies": {
+        "azure-iot-common": {
+          "version": "1.1.3",
+          "resolved": "https://registry.npmjs.org/azure-iot-common/-/azure-iot-common-1.1.3.tgz",
+          "integrity": "sha1-qNPp9/HZiHe34GqVsO7KCu+ufR4=",
+          "requires": {
+            "crypto": "0.0.3"
+          }
+        },
+        "uuid": {
+          "version": "3.2.1",
+          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz",
+          "integrity": "sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="
+        }
+      }
+    },
+    "azure-iot-amqp-base": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/azure-iot-amqp-base/-/azure-iot-amqp-base-1.4.1.tgz",
+      "integrity": "sha512-zCO5kpk0/hkz7eWGW1fVwt60CKV+BhUzRGvqSaA5hxoWRDiLRecb3ZLEPZTZ+ESpeApNyTKDikgy/mvov0KGqA==",
+      "requires": {
+        "amqp10": "3.6.0",
+        "amqp10-transport-ws": "0.0.5",
+        "async": "2.6.0",
+        "azure-iot-common": "1.4.1",
+        "bluebird": "3.5.1",
+        "debug": "3.1.0",
+        "machina": "2.0.2",
+        "uuid": "3.2.1"
+      },
+      "dependencies": {
+        "amqp10": {
+          "version": "3.6.0",
+          "resolved": "https://registry.npmjs.org/amqp10/-/amqp10-3.6.0.tgz",
+          "integrity": "sha512-o8Agnjuf4ve+aT1IExkTLeL5/rAqxvL4gqDkO06AfRlL9SRSklMMMzKqmPsVjcV5ySOVEQqyFUOAhI3wm3KT1A==",
+          "requires": {
+            "bl": "1.2.2",
+            "bluebird": "3.5.1",
+            "buffer-builder": "0.2.0",
+            "debug": "2.6.9",
+            "lodash": "4.17.10",
+            "node-int64": "0.4.0",
+            "stately.js": "1.3.0"
+          },
+          "dependencies": {
+            "debug": {
+              "version": "2.6.9",
+              "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
+              "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
+              "requires": {
+                "ms": "2.0.0"
+              }
+            }
+          }
+        },
+        "debug": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
+          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
+          "requires": {
+            "ms": "2.0.0"
+          }
+        },
+        "uuid": {
+          "version": "3.2.1",
+          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz",
+          "integrity": "sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="
+        }
+      }
+    },
+    "azure-iot-common": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/azure-iot-common/-/azure-iot-common-1.4.1.tgz",
+      "integrity": "sha512-72mM5UhOk2m3P1xVuIOXx8/CWVfR6MugdHjiDQUDx089/SVuzF7qKJA0bozekFcwUQOuYCFIHnRL/wOQY2ce9w=="
+    },
+    "azure-iot-device": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/azure-iot-device/-/azure-iot-device-1.3.2.tgz",
+      "integrity": "sha512-W/22IvNgs9bDEPhIakV7eOVT0x57K96mh34qK+6jAtGNOREwaGUS/kZtWCVpBE9MehN71JI8zkpHEruFNqYkUw==",
+      "requires": {
+        "azure-iot-common": "1.4.1",
+        "azure-iot-http-base": "1.3.2",
+        "azure-storage": "2.8.2",
+        "debug": "3.1.0",
+        "lodash": "4.17.10",
+        "machina": "2.0.2",
+        "traverse": "0.6.6"
+      },
+      "dependencies": {
+        "azure-storage": {
+          "version": "2.8.2",
+          "resolved": "https://registry.npmjs.org/azure-storage/-/azure-storage-2.8.2.tgz",
+          "integrity": "sha1-GctjKx5WMK6uVEUaZNrBYLFlyEg=",
+          "requires": {
+            "browserify-mime": "1.2.9",
+            "extend": "1.2.1",
+            "json-edm-parser": "0.1.2",
+            "md5.js": "1.3.4",
+            "readable-stream": "2.0.6",
+            "request": "2.83.0",
+            "underscore": "1.8.3",
+            "uuid": "3.2.1",
+            "validator": "9.4.1",
+            "xml2js": "0.2.8",
+            "xmlbuilder": "0.4.3"
+          }
+        },
+        "debug": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
+          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
+          "requires": {
+            "ms": "2.0.0"
+          }
+        },
+        "process-nextick-args": {
+          "version": "1.0.7",
+          "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-1.0.7.tgz",
+          "integrity": "sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M="
+        },
+        "readable-stream": {
+          "version": "2.0.6",
+          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.0.6.tgz",
+          "integrity": "sha1-j5A0HmilPMySh4jaz80Rs265t44=",
+          "requires": {
+            "core-util-is": "1.0.2",
+            "inherits": "2.0.3",
+            "isarray": "1.0.0",
+            "process-nextick-args": "1.0.7",
+            "string_decoder": "0.10.31",
+            "util-deprecate": "1.0.2"
+          }
+        },
+        "string_decoder": {
+          "version": "0.10.31",
+          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
+          "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ="
+        },
+        "uuid": {
+          "version": "3.2.1",
+          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz",
+          "integrity": "sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="
+        }
+      }
+    },
+    "azure-iot-device-amqp": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/azure-iot-device-amqp/-/azure-iot-device-amqp-1.3.2.tgz",
+      "integrity": "sha512-H4mWnz09PEYbGEFRawa9qHwhwaI/0xWo5iv4lGeEi6C0LWF7RZLC33wfMRUb5Itjp3QBxBxMvyBuEjl6ivpxcQ==",
+      "requires": {
+        "async": "2.6.0",
+        "azure-iot-amqp-base": "1.4.1",
+        "azure-iot-common": "1.4.1",
+        "azure-iot-device": "1.3.2",
+        "debug": "3.1.0",
+        "machina": "2.0.2",
+        "uuid": "3.2.1"
+      },
+      "dependencies": {
+        "debug": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
+          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
+          "requires": {
+            "ms": "2.0.0"
+          }
+        },
+        "uuid": {
+          "version": "3.2.1",
+          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz",
+          "integrity": "sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="
+        }
+      }
+    },
+    "azure-iot-device-http": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/azure-iot-device-http/-/azure-iot-device-http-1.3.2.tgz",
+      "integrity": "sha512-nvjEosJQaxSow3wg6GM3A9q3j0hgN8OZSsGWjr7YvSbEkiSGCQEwNj1lzewgGv+EIxzoum1QNmO1XkPuALOdLg==",
+      "requires": {
+        "azure-iot-common": "1.4.1",
+        "azure-iot-device": "1.3.2",
+        "azure-iot-http-base": "1.3.2",
+        "debug": "3.1.0",
+        "node-crontab": "0.0.8"
+      },
+      "dependencies": {
+        "debug": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
+          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
+          "requires": {
+            "ms": "2.0.0"
+          }
+        }
+      }
+    },
+    "azure-iot-device-mqtt": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/azure-iot-device-mqtt/-/azure-iot-device-mqtt-1.3.2.tgz",
+      "integrity": "sha512-7WmekEre6KaEbIsg19Ktxs/jWEMfj+OSz1zwRAVQAd2CCYpJSYPLR7/tXjBs6iiI9aiBDtsCzLVslqdWLSLmTg==",
+      "requires": {
+        "azure-iot-common": "1.4.1",
+        "azure-iot-device": "1.3.2",
+        "azure-iot-mqtt-base": "1.3.2",
+        "debug": "3.1.0",
+        "machina": "2.0.2"
+      },
+      "dependencies": {
+        "debug": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
+          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
+          "requires": {
+            "ms": "2.0.0"
+          }
+        }
+      }
+    },
+    "azure-iot-http-base": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/azure-iot-http-base/-/azure-iot-http-base-1.3.2.tgz",
+      "integrity": "sha512-MBbfgZoZSEFq7I/MNDhdwWeWMdzm3g0zcGsXUidRgxd15aKpDbvxjARGeNhw22WK1WbamzsRgEGMLB4rXa2mLg==",
+      "requires": {
+        "azure-iot-common": "1.4.1",
+        "debug": "3.1.0",
+        "uuid": "3.2.1"
+      },
+      "dependencies": {
+        "debug": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
+          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
+          "requires": {
+            "ms": "2.0.0"
+          }
+        },
+        "uuid": {
+          "version": "3.2.1",
+          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz",
+          "integrity": "sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="
+        }
+      }
+    },
+    "azure-iot-mqtt-base": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/azure-iot-mqtt-base/-/azure-iot-mqtt-base-1.3.2.tgz",
+      "integrity": "sha512-LHacZFMp/1/ulMmgTVW41evEhWfERooWk3Gnof0d5CqxY43o/tev18/w0DrJP89QbOQI2c1ZCvtNFMimsYxqEg==",
+      "requires": {
+        "azure-iot-common": "1.4.1",
+        "debug": "3.1.0",
+        "machina": "2.0.2",
+        "mqtt": "2.17.0"
+      },
+      "dependencies": {
+        "debug": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
+          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
+          "requires": {
+            "ms": "2.0.0"
+          }
+        }
+      }
+    },
+    "azure-iothub": {
+      "version": "1.2.5",
+      "resolved": "https://registry.npmjs.org/azure-iothub/-/azure-iothub-1.2.5.tgz",
+      "integrity": "sha512-svbXriSufIxKF96lh8X2EpdCFQmr+qAnim5wNXU7nH2N2grBg5rDCqL9xvDhyB+vKwFNxCI/cXTyoFqo3uxdyA==",
+      "requires": {
+        "async": "2.6.0",
+        "azure-iot-amqp-base": "1.4.1",
+        "azure-iot-common": "1.4.1",
+        "azure-iot-http-base": "1.3.2",
+        "debug": "3.1.0",
+        "lodash": "4.17.10",
+        "machina": "2.0.2"
+      },
+      "dependencies": {
+        "debug": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
+          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
+          "requires": {
+            "ms": "2.0.0"
+          }
+        }
+      }
+    },
+    "azure-storage": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/azure-storage/-/azure-storage-1.4.0.tgz",
+      "integrity": "sha1-+1L6aLPvppgMM/18XNSJt63EbtE=",
+      "requires": {
+        "browserify-mime": "1.2.9",
+        "extend": "1.2.1",
+        "json-edm-parser": "0.1.2",
+        "node-uuid": "1.4.8",
+        "readable-stream": "2.0.6",
+        "request": "2.74.0",
+        "underscore": "1.4.4",
+        "validator": "3.22.2",
+        "xml2js": "0.2.7",
+        "xmlbuilder": "0.4.3"
+      },
+      "dependencies": {
+        "assert-plus": {
+          "version": "0.2.0",
+          "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-0.2.0.tgz",
+          "integrity": "sha1-104bh+ev/A24qttwIfP+SBAasjQ="
+        },
+        "aws-sign2": {
+          "version": "0.6.0",
+          "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.6.0.tgz",
+          "integrity": "sha1-FDQt0428yU0OW4fXY81jYSwOeU8="
+        },
+        "bl": {
+          "version": "1.1.2",
+          "resolved": "https://registry.npmjs.org/bl/-/bl-1.1.2.tgz",
+          "integrity": "sha1-/cqHGplxOqANGeO7ukHER4emU5g=",
+          "requires": {
+            "readable-stream": "2.0.6"
+          }
+        },
+        "boom": {
+          "version": "2.10.1",
+          "resolved": "https://registry.npmjs.org/boom/-/boom-2.10.1.tgz",
+          "integrity": "sha1-OciRjO/1eZ+D+UkqhI9iWt0Mdm8=",
+          "requires": {
+            "hoek": "2.16.3"
+          }
+        },
+        "caseless": {
+          "version": "0.11.0",
+          "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.11.0.tgz",
+          "integrity": "sha1-cVuW6phBWTzDMGeSP17GDr2k99c="
+        },
+        "cryptiles": {
+          "version": "2.0.5",
+          "resolved": "https://registry.npmjs.org/cryptiles/-/cryptiles-2.0.5.tgz",
+          "integrity": "sha1-O9/s3GCBR8HGcgL6KR59ylnqo7g=",
+          "requires": {
+            "boom": "2.10.1"
+          }
+        },
+        "form-data": {
+          "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/form-data/-/form-data-1.0.1.tgz",
+          "integrity": "sha1-rjFduaSQf6BlUCMEpm13M0de43w=",
+          "requires": {
+            "async": "2.6.0",
+            "combined-stream": "1.0.6",
+            "mime-types": "2.1.18"
+          }
+        },
+        "har-validator": {
+          "version": "2.0.6",
+          "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-2.0.6.tgz",
+          "integrity": "sha1-zcvAgYgmWtEZtqWnyKtw7s+10n0=",
+          "requires": {
+            "chalk": "1.1.3",
+            "commander": "2.15.1",
+            "is-my-json-valid": "2.17.2",
+            "pinkie-promise": "2.0.1"
+          }
+        },
+        "hawk": {
+          "version": "3.1.3",
+          "resolved": "https://registry.npmjs.org/hawk/-/hawk-3.1.3.tgz",
+          "integrity": "sha1-B4REvXwWQLD+VA0sm3PVlnjo4cQ=",
+          "requires": {
+            "boom": "2.10.1",
+            "cryptiles": "2.0.5",
+            "hoek": "2.16.3",
+            "sntp": "1.0.9"
+          }
+        },
+        "hoek": {
+          "version": "2.16.3",
+          "resolved": "https://registry.npmjs.org/hoek/-/hoek-2.16.3.tgz",
+          "integrity": "sha1-ILt0A9POo5jpHcRxCo/xuCdKJe0="
+        },
+        "http-signature": {
+          "version": "1.1.1",
+          "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.1.1.tgz",
+          "integrity": "sha1-33LiZwZs0Kxn+3at+OE0qPvPkb8=",
+          "requires": {
+            "assert-plus": "0.2.0",
+            "jsprim": "1.4.1",
+            "sshpk": "1.14.1"
+          }
+        },
+        "process-nextick-args": {
+          "version": "1.0.7",
+          "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-1.0.7.tgz",
+          "integrity": "sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M="
+        },
+        "qs": {
+          "version": "6.2.3",
+          "resolved": "https://registry.npmjs.org/qs/-/qs-6.2.3.tgz",
+          "integrity": "sha1-HPyyXBCpsrSDBT/zn138kjOQjP4="
+        },
+        "readable-stream": {
+          "version": "2.0.6",
+          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.0.6.tgz",
+          "integrity": "sha1-j5A0HmilPMySh4jaz80Rs265t44=",
+          "requires": {
+            "core-util-is": "1.0.2",
+            "inherits": "2.0.3",
+            "isarray": "1.0.0",
+            "process-nextick-args": "1.0.7",
+            "string_decoder": "0.10.31",
+            "util-deprecate": "1.0.2"
+          }
+        },
+        "request": {
+          "version": "2.74.0",
+          "resolved": "https://registry.npmjs.org/request/-/request-2.74.0.tgz",
+          "integrity": "sha1-dpPKdou7DqXIzgjAhKRe+gW4kqs=",
+          "requires": {
+            "aws-sign2": "0.6.0",
+            "aws4": "1.7.0",
+            "bl": "1.1.2",
+            "caseless": "0.11.0",
+            "combined-stream": "1.0.6",
+            "extend": "3.0.1",
+            "forever-agent": "0.6.1",
+            "form-data": "1.0.1",
+            "har-validator": "2.0.6",
+            "hawk": "3.1.3",
+            "http-signature": "1.1.1",
+            "is-typedarray": "1.0.0",
+            "isstream": "0.1.2",
+            "json-stringify-safe": "5.0.1",
+            "mime-types": "2.1.18",
+            "node-uuid": "1.4.8",
+            "oauth-sign": "0.8.2",
+            "qs": "6.2.3",
+            "stringstream": "0.0.5",
+            "tough-cookie": "2.3.4",
+            "tunnel-agent": "0.4.3"
+          },
+          "dependencies": {
+            "extend": {
+              "version": "3.0.1",
+              "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.1.tgz",
+              "integrity": "sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ="
+            }
+          }
+        },
+        "sax": {
+          "version": "0.5.2",
+          "resolved": "https://registry.npmjs.org/sax/-/sax-0.5.2.tgz",
+          "integrity": "sha1-c1/6o5oc/4/7lZjwIjq9sDqfsuo="
+        },
+        "sntp": {
+          "version": "1.0.9",
+          "resolved": "https://registry.npmjs.org/sntp/-/sntp-1.0.9.tgz",
+          "integrity": "sha1-ZUEYTMkK7qbG57NeJlkIJEPGYZg=",
+          "requires": {
+            "hoek": "2.16.3"
+          }
+        },
+        "string_decoder": {
+          "version": "0.10.31",
+          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
+          "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ="
+        },
+        "tunnel-agent": {
+          "version": "0.4.3",
+          "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.4.3.tgz",
+          "integrity": "sha1-Y3PbdpCf5XDgjXNYM2Xtgop07us="
+        },
+        "underscore": {
+          "version": "1.4.4",
+          "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.4.4.tgz",
+          "integrity": "sha1-YaajIBBiKvoHljvzJSA88SI51gQ="
+        },
+        "validator": {
+          "version": "3.22.2",
+          "resolved": "https://registry.npmjs.org/validator/-/validator-3.22.2.tgz",
+          "integrity": "sha1-byl65n9/gqzHbQr9tJ8Y2aCcGMA="
+        },
+        "xml2js": {
+          "version": "0.2.7",
+          "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.2.7.tgz",
+          "integrity": "sha1-GDhRi7AXQcrgh4urSRXklMMjBq8=",
+          "requires": {
+            "sax": "0.5.2"
+          }
+        }
+      }
+    },
+    "balanced-match": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz",
+      "integrity": "sha1-ibTRmasr7kneFk6gK4nORi1xt2c="
+    },
+    "bcrypt-pbkdf": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz",
+      "integrity": "sha1-Y7xdy2EzG5K8Bf1SiVPDNGKgb40=",
+      "optional": true,
+      "requires": {
+        "tweetnacl": "0.14.5"
+      }
+    },
+    "bl": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/bl/-/bl-1.2.2.tgz",
+      "integrity": "sha512-e8tQYnZodmebYDWGH7KMRvtzKXaJHx3BbilrgZCfvyLUYdKpK1t5PSPmpkny/SgiTSCnjfLW7v5rlONXVFkQEA==",
+      "requires": {
+        "readable-stream": "2.3.6",
+        "safe-buffer": "5.1.2"
+      }
+    },
+    "bluebird": {
+      "version": "3.5.1",
+      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.5.1.tgz",
+      "integrity": "sha512-MKiLiV+I1AA596t9w1sQJ8jkiSr5+ZKi0WKrYGUn6d1Fx+Ij4tIj+m2WMQSGczs5jZVxV339chE8iwk6F64wjA=="
+    },
+    "boom": {
+      "version": "4.3.1",
+      "resolved": "https://registry.npmjs.org/boom/-/boom-4.3.1.tgz",
+      "integrity": "sha1-T4owBctKfjiJ90kDD9JbluAdLjE=",
+      "requires": {
+        "hoek": "4.2.1"
+      }
+    },
+    "brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "requires": {
+        "balanced-match": "1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "browserify-mime": {
+      "version": "1.2.9",
+      "resolved": "https://registry.npmjs.org/browserify-mime/-/browserify-mime-1.2.9.tgz",
+      "integrity": "sha1-rrGvKN5sDXpqLOQK22j/GEIq8x8="
+    },
+    "buffer-builder": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/buffer-builder/-/buffer-builder-0.2.0.tgz",
+      "integrity": "sha1-MyLNMH2Cltqx9gRhhZOyYaP63o8="
+    },
+    "buffer-from": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.0.0.tgz",
+      "integrity": "sha512-83apNb8KK0Se60UE1+4Ukbe3HbfELJ6UlI4ldtOGs7So4KD26orJM8hIY9lxdzP+UpItH1Yh/Y8GUvNFWFFRxA=="
+    },
+    "callback-stream": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/callback-stream/-/callback-stream-1.1.0.tgz",
+      "integrity": "sha1-RwGlEmbwbgbqpx/BcjOCLYdfSQg=",
+      "requires": {
+        "inherits": "2.0.3",
+        "readable-stream": "2.3.6"
+      }
+    },
+    "caseless": {
+      "version": "0.12.0",
+      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
+      "integrity": "sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="
+    },
+    "chalk": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-1.1.3.tgz",
+      "integrity": "sha1-qBFcVeSnAv5NFQq9OHKCKn4J/Jg=",
+      "requires": {
+        "ansi-styles": "2.2.1",
+        "escape-string-regexp": "1.0.5",
+        "has-ansi": "2.0.0",
+        "strip-ansi": "3.0.1",
+        "supports-color": "2.0.0"
+      }
+    },
+    "charenc": {
+      "version": "0.0.2",
+      "resolved": "https://registry.npmjs.org/charenc/-/charenc-0.0.2.tgz",
+      "integrity": "sha1-wKHS86cJLgN3S/qD8UwPxXkKhmc="
+    },
+    "co": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
+      "integrity": "sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ="
+    },
+    "colors": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/colors/-/colors-1.0.3.tgz",
+      "integrity": "sha1-BDP0TYCWgP3rYO0mDxsMJi6CpAs="
+    },
+    "colors-tmpl": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/colors-tmpl/-/colors-tmpl-1.0.0.tgz",
+      "integrity": "sha1-tgrEr4FlVdnt8a0kczfrMCQbbS4=",
+      "requires": {
+        "colors": "1.0.3"
+      }
+    },
+    "combined-stream": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.6.tgz",
+      "integrity": "sha1-cj599ugBrFYTETp+RFqbactjKBg=",
+      "requires": {
+        "delayed-stream": "1.0.0"
+      }
+    },
+    "commander": {
+      "version": "2.15.1",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-2.15.1.tgz",
+      "integrity": "sha512-VlfT9F3V0v+jr4yxPc5gg9s62/fIVWsd2Bk2iD435um1NlGMYdVCq+MjcXnhYq2icNOizHr1kK+5TI6H0Hy0ag=="
+    },
+    "commist": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/commist/-/commist-1.0.0.tgz",
+      "integrity": "sha1-wMNSUBz29S6RJOPvicmAbiAi6+8=",
+      "requires": {
+        "leven": "1.0.2",
+        "minimist": "1.2.0"
+      }
+    },
+    "concat-map": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s="
+    },
+    "concat-stream": {
+      "version": "1.6.2",
+      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
+      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
+      "requires": {
+        "buffer-from": "1.0.0",
+        "inherits": "2.0.3",
+        "readable-stream": "2.3.6",
+        "typedarray": "0.0.6"
+      }
+    },
+    "core-util-is": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
+      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
+    },
+    "cron-parser": {
+      "version": "0.3.6",
+      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-0.3.6.tgz",
+      "integrity": "sha1-Hkc069X6BU9XZmk8UkaLF9+Wgck="
+    },
+    "crypt": {
+      "version": "0.0.2",
+      "resolved": "https://registry.npmjs.org/crypt/-/crypt-0.0.2.tgz",
+      "integrity": "sha1-iNf/fsDfuG9xPch7u0LQRNPmxBs="
+    },
+    "cryptiles": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/cryptiles/-/cryptiles-3.1.2.tgz",
+      "integrity": "sha1-qJ+7Ig9c4l7FboxKqKT9e1sNKf4=",
+      "requires": {
+        "boom": "5.2.0"
+      },
+      "dependencies": {
+        "boom": {
+          "version": "5.2.0",
+          "resolved": "https://registry.npmjs.org/boom/-/boom-5.2.0.tgz",
+          "integrity": "sha512-Z5BTk6ZRe4tXXQlkqftmsAUANpXmuwlsF5Oov8ThoMbQRzdGTA1ngYRW160GexgOgjsFOKJz0LYhoNi+2AMBUw==",
+          "requires": {
+            "hoek": "4.2.1"
+          }
+        }
+      }
+    },
+    "crypto": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/crypto/-/crypto-0.0.3.tgz",
+      "integrity": "sha1-RwqBuGvkxe4XrMggeh9TFa4g27A="
+    },
+    "dashdash": {
+      "version": "1.14.1",
+      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
+      "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
+      "requires": {
+        "assert-plus": "1.0.0"
+      }
+    },
+    "debug": {
+      "version": "2.6.9",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
+      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
+      "requires": {
+        "ms": "2.0.0"
+      }
+    },
+    "delayed-stream": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
+      "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk="
+    },
+    "duplexify": {
+      "version": "3.5.4",
+      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-3.5.4.tgz",
+      "integrity": "sha512-JzYSLYMhoVVBe8+mbHQ4KgpvHpm0DZpJuL8PY93Vyv1fW7jYJ90LoXa1di/CVbJM+TgMs91rbDapE/RNIfnJsA==",
+      "requires": {
+        "end-of-stream": "1.4.1",
+        "inherits": "2.0.3",
+        "readable-stream": "2.3.6",
+        "stream-shift": "1.0.0"
+      }
+    },
+    "ecc-jsbn": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz",
+      "integrity": "sha1-D8c6ntXw1Tw4GTOYUj735UN3dQU=",
+      "optional": true,
+      "requires": {
+        "jsbn": "0.1.1"
+      }
+    },
+    "end-of-stream": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.1.tgz",
+      "integrity": "sha512-1MkrZNvWTKCaigbn+W15elq2BB/L22nqrSY5DKlo3X6+vclJm8Bb5djXJBmEX6fS3+zCh/F4VBK5Z2KxJt4s2Q==",
+      "requires": {
+        "once": "1.4.0"
+      }
+    },
+    "escape-string-regexp": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
+      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="
+    },
+    "extend": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/extend/-/extend-1.2.1.tgz",
+      "integrity": "sha1-oPX9bPyDpf5J72mNYOyKYk3UV2w="
+    },
+    "extsprintf": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
+      "integrity": "sha1-lpGEQOMEGnpBT4xS48V06zw+HgU="
+    },
+    "fast-deep-equal": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.1.0.tgz",
+      "integrity": "sha1-wFNHeBfIa1HaqFPIHgWbcz0CNhQ="
+    },
+    "fast-json-stable-stringify": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz",
+      "integrity": "sha1-1RQsDK7msRifh9OnYREGT4bIu/I="
+    },
+    "forever-agent": {
+      "version": "0.6.1",
+      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
+      "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="
+    },
+    "form-data": {
+      "version": "2.3.2",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.2.tgz",
+      "integrity": "sha1-SXBJi+YEwgwAXU9cI67NIda0kJk=",
+      "requires": {
+        "asynckit": "0.4.0",
+        "combined-stream": "1.0.6",
+        "mime-types": "2.1.18"
+      }
+    },
+    "fs.realpath": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
+      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="
+    },
+    "generate-function": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/generate-function/-/generate-function-2.0.0.tgz",
+      "integrity": "sha1-aFj+fAlpt9TpCTM3ZHrHn2DfvnQ="
+    },
+    "generate-object-property": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/generate-object-property/-/generate-object-property-1.2.0.tgz",
+      "integrity": "sha1-nA4cQDCM6AT0eDYYuTf6iPmdUNA=",
+      "requires": {
+        "is-property": "1.0.2"
+      }
+    },
+    "getpass": {
+      "version": "0.1.7",
+      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
+      "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
+      "requires": {
+        "assert-plus": "1.0.0"
+      }
+    },
+    "glob": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
+      "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==",
+      "requires": {
+        "fs.realpath": "1.0.0",
+        "inflight": "1.0.6",
+        "inherits": "2.0.3",
+        "minimatch": "3.0.4",
+        "once": "1.4.0",
+        "path-is-absolute": "1.0.1"
+      }
+    },
+    "glob-parent": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-3.1.0.tgz",
+      "integrity": "sha1-nmr2KZ2NO9K9QEMIMr0RPfkGxa4=",
+      "requires": {
+        "is-glob": "3.1.0",
+        "path-dirname": "1.0.2"
+      }
+    },
+    "glob-stream": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/glob-stream/-/glob-stream-6.1.0.tgz",
+      "integrity": "sha1-cEXJlBOz65SIjYOrRtC0BMx73eQ=",
+      "requires": {
+        "extend": "3.0.1",
+        "glob": "7.1.2",
+        "glob-parent": "3.1.0",
+        "is-negated-glob": "1.0.0",
+        "ordered-read-streams": "1.0.1",
+        "pumpify": "1.4.0",
+        "readable-stream": "2.3.6",
+        "remove-trailing-separator": "1.1.0",
+        "to-absolute-glob": "2.0.2",
+        "unique-stream": "2.2.1"
+      },
+      "dependencies": {
+        "extend": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.1.tgz",
+          "integrity": "sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ="
+        }
+      }
+    },
+    "har-schema": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
+      "integrity": "sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="
+    },
+    "har-validator": {
+      "version": "5.0.3",
+      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.0.3.tgz",
+      "integrity": "sha1-ukAsJmGU8VlW7xXg/PJCmT9qff0=",
+      "requires": {
+        "ajv": "5.5.2",
+        "har-schema": "2.0.0"
+      }
+    },
+    "has-ansi": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/has-ansi/-/has-ansi-2.0.0.tgz",
+      "integrity": "sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE=",
+      "requires": {
+        "ansi-regex": "2.1.1"
+      }
+    },
+    "hash-base": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/hash-base/-/hash-base-3.0.4.tgz",
+      "integrity": "sha1-X8hoaEfs1zSZQDMZprCj8/auSRg=",
+      "requires": {
+        "inherits": "2.0.3",
+        "safe-buffer": "5.1.2"
+      }
+    },
+    "hawk": {
+      "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz",
+      "integrity": "sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ==",
+      "requires": {
+        "boom": "4.3.1",
+        "cryptiles": "3.1.2",
+        "hoek": "4.2.1",
+        "sntp": "2.1.0"
+      }
+    },
+    "help-me": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/help-me/-/help-me-1.1.0.tgz",
+      "integrity": "sha1-jy1QjQYAtKRW2i8IZVbn5cBWo8Y=",
+      "requires": {
+        "callback-stream": "1.1.0",
+        "glob-stream": "6.1.0",
+        "through2": "2.0.3",
+        "xtend": "4.0.1"
+      }
+    },
+    "hoek": {
+      "version": "4.2.1",
+      "resolved": "https://registry.npmjs.org/hoek/-/hoek-4.2.1.tgz",
+      "integrity": "sha512-QLg82fGkfnJ/4iy1xZ81/9SIJiq1NGFUMGs6ParyjBZr6jW2Ufj/snDqTHixNlHdPNwN2RLVD0Pi3igeK9+JfA=="
+    },
+    "http-signature": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
+      "integrity": "sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
+      "requires": {
+        "assert-plus": "1.0.0",
+        "jsprim": "1.4.1",
+        "sshpk": "1.14.1"
+      }
+    },
+    "inflight": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
+      "requires": {
+        "once": "1.4.0",
+        "wrappy": "1.0.2"
+      }
+    },
+    "inherits": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
+      "integrity": "sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="
+    },
+    "iothub-explorer": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/iothub-explorer/-/iothub-explorer-1.2.1.tgz",
+      "integrity": "sha512-n05y93NT9CMNAa3T9oD34chPOgq3ckZJioqkF8W6cyzTOmSHLKL9cv9IOPqHQDydWB1bYt7nojMmK1oYolcd8A==",
+      "requires": {
+        "azure-event-hubs": "0.0.8",
+        "azure-iot-common": "1.4.1",
+        "azure-iot-device": "1.3.2",
+        "azure-iot-device-amqp": "1.3.2",
+        "azure-iot-device-http": "1.3.2",
+        "azure-iot-device-mqtt": "1.3.2",
+        "azure-iothub": "1.2.5",
+        "azure-storage": "1.4.0",
+        "bluebird": "3.5.1",
+        "colors-tmpl": "1.0.0",
+        "commander": "2.15.1",
+        "lodash": "4.17.10",
+        "pem": "1.12.5",
+        "prettyjson": "1.2.1",
+        "uuid": "2.0.3"
+      }
+    },
+    "is-absolute": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-absolute/-/is-absolute-1.0.0.tgz",
+      "integrity": "sha512-dOWoqflvcydARa360Gvv18DZ/gRuHKi2NU/wU5X1ZFzdYfH29nkiNZsF3mp4OJ3H4yo9Mx8A/uAGNzpzPN3yBA==",
+      "requires": {
+        "is-relative": "1.0.0",
+        "is-windows": "1.0.2"
+      }
+    },
+    "is-buffer": {
+      "version": "1.1.6",
+      "resolved": "https://registry.npmjs.org/is-buffer/-/is-buffer-1.1.6.tgz",
+      "integrity": "sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w=="
+    },
+    "is-extglob": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
+      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI="
+    },
+    "is-glob": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-3.1.0.tgz",
+      "integrity": "sha1-e6WuJCF4BKxwcHuWkiVnSGzD6Eo=",
+      "requires": {
+        "is-extglob": "2.1.1"
+      }
+    },
+    "is-my-ip-valid": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-my-ip-valid/-/is-my-ip-valid-1.0.0.tgz",
+      "integrity": "sha512-gmh/eWXROncUzRnIa1Ubrt5b8ep/MGSnfAUI3aRp+sqTCs1tv1Isl8d8F6JmkN3dXKc3ehZMrtiPN9eL03NuaQ=="
+    },
+    "is-my-json-valid": {
+      "version": "2.17.2",
+      "resolved": "https://registry.npmjs.org/is-my-json-valid/-/is-my-json-valid-2.17.2.tgz",
+      "integrity": "sha512-IBhBslgngMQN8DDSppmgDv7RNrlFotuuDsKcrCP3+HbFaVivIBU7u9oiiErw8sH4ynx3+gOGQ3q2otkgiSi6kg==",
+      "requires": {
+        "generate-function": "2.0.0",
+        "generate-object-property": "1.2.0",
+        "is-my-ip-valid": "1.0.0",
+        "jsonpointer": "4.0.1",
+        "xtend": "4.0.1"
+      }
+    },
+    "is-negated-glob": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-negated-glob/-/is-negated-glob-1.0.0.tgz",
+      "integrity": "sha1-aRC8pdqMleeEtXUbl2z1oQ/uNtI="
+    },
+    "is-property": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz",
+      "integrity": "sha1-V/4cTkhHTt1lsJkR8msc1Ald2oQ="
+    },
+    "is-relative": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-relative/-/is-relative-1.0.0.tgz",
+      "integrity": "sha512-Kw/ReK0iqwKeu0MITLFuj0jbPAmEiOsIwyIXvvbfa6QfmN9pkD1M+8pdk7Rl/dTKbH34/XBFMbgD4iMJhLQbGA==",
+      "requires": {
+        "is-unc-path": "1.0.0"
+      }
+    },
+    "is-typedarray": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
+      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="
+    },
+    "is-unc-path": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-unc-path/-/is-unc-path-1.0.0.tgz",
+      "integrity": "sha512-mrGpVd0fs7WWLfVsStvgF6iEJnbjDFZh9/emhRDcGWTduTfNHd9CHeUwH3gYIjdbwo4On6hunkztwOaAw0yllQ==",
+      "requires": {
+        "unc-path-regex": "0.1.2"
+      }
+    },
+    "is-windows": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/is-windows/-/is-windows-1.0.2.tgz",
+      "integrity": "sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA=="
+    },
+    "isarray": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
+      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
+    },
+    "isexe": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA="
+    },
+    "isstream": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
+      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="
+    },
+    "jsbn": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
+      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM=",
+      "optional": true
+    },
+    "json-edm-parser": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/json-edm-parser/-/json-edm-parser-0.1.2.tgz",
+      "integrity": "sha1-HmCw/vG8CvZ7wNFG393lSGzWFbQ=",
+      "requires": {
+        "jsonparse": "1.2.0"
+      }
+    },
+    "json-schema": {
+      "version": "0.2.3",
+      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz",
+      "integrity": "sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM="
+    },
+    "json-schema-traverse": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz",
+      "integrity": "sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A="
+    },
+    "json-stable-stringify": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/json-stable-stringify/-/json-stable-stringify-1.0.1.tgz",
+      "integrity": "sha1-mnWdOcXy/1A/1TAGRu1EX4jE+a8=",
+      "requires": {
+        "jsonify": "0.0.0"
+      }
+    },
+    "json-stringify-safe": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+      "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="
+    },
+    "jsonify": {
+      "version": "0.0.0",
+      "resolved": "https://registry.npmjs.org/jsonify/-/jsonify-0.0.0.tgz",
+      "integrity": "sha1-LHS27kHZPKUbe1qu6PUDYx0lKnM="
+    },
+    "jsonparse": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/jsonparse/-/jsonparse-1.2.0.tgz",
+      "integrity": "sha1-XAxWhRBxYOcv50ib3eoLRMK8Z70="
+    },
+    "jsonpointer": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/jsonpointer/-/jsonpointer-4.0.1.tgz",
+      "integrity": "sha1-T9kss04OnbPInIYi7PUfm5eMbLk="
+    },
+    "jsprim": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz",
+      "integrity": "sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=",
+      "requires": {
+        "assert-plus": "1.0.0",
+        "extsprintf": "1.3.0",
+        "json-schema": "0.2.3",
+        "verror": "1.10.0"
+      }
+    },
+    "leven": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/leven/-/leven-1.0.2.tgz",
+      "integrity": "sha1-kUS27ryl8dBoAWnxpncNzqYLdcM="
+    },
+    "lodash": {
+      "version": "4.17.10",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.10.tgz",
+      "integrity": "sha512-UejweD1pDoXu+AD825lWwp4ZGtSwgnpZxb3JDViD7StjQz+Nb/6l093lx4OQ0foGWNRoc19mWy7BzL+UAK2iVg=="
+    },
+    "machina": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/machina/-/machina-2.0.2.tgz",
+      "integrity": "sha512-9U9g4eQjQ2JARX7h/051r65EQEfFfpPxoSjVmUMJG6gnfjVjM+rjwVLoq7Z9NovjYm7AR3oTWWPtHVlgeSZzYw==",
+      "requires": {
+        "lodash": "3.10.1"
+      },
+      "dependencies": {
+        "lodash": {
+          "version": "3.10.1",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz",
+          "integrity": "sha1-W/Rejkm6QYnhfUgnid/RW9FAt7Y="
+        }
+      }
+    },
+    "md5": {
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/md5/-/md5-2.2.1.tgz",
+      "integrity": "sha1-U6s41f48iJG6RlMp6iP6wFQBJvk=",
+      "requires": {
+        "charenc": "0.0.2",
+        "crypt": "0.0.2",
+        "is-buffer": "1.1.6"
+      }
+    },
+    "md5.js": {
+      "version": "1.3.4",
+      "resolved": "https://registry.npmjs.org/md5.js/-/md5.js-1.3.4.tgz",
+      "integrity": "sha1-6b296UogpawYsENA/Fdk1bCdkB0=",
+      "requires": {
+        "hash-base": "3.0.4",
+        "inherits": "2.0.3"
+      }
+    },
+    "mime-db": {
+      "version": "1.33.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.33.0.tgz",
+      "integrity": "sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ=="
+    },
+    "mime-types": {
+      "version": "2.1.18",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.18.tgz",
+      "integrity": "sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ==",
+      "requires": {
+        "mime-db": "1.33.0"
+      }
+    },
+    "minimatch": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
+      "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
+      "requires": {
+        "brace-expansion": "1.1.11"
+      }
+    },
+    "minimist": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
+      "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ="
+    },
+    "mqtt": {
+      "version": "2.17.0",
+      "resolved": "https://registry.npmjs.org/mqtt/-/mqtt-2.17.0.tgz",
+      "integrity": "sha512-eYeK5G/GQcdP/AOrGQMUULX7QvBXt3I9bfmgNkzMTsdSR1ywJQhK1iCYPrhh+rtRl3eUSJwEbO+oZx/Q51uHaw==",
+      "requires": {
+        "commist": "1.0.0",
+        "concat-stream": "1.6.2",
+        "end-of-stream": "1.4.1",
+        "help-me": "1.1.0",
+        "inherits": "2.0.3",
+        "minimist": "1.2.0",
+        "mqtt-packet": "5.5.0",
+        "pump": "3.0.0",
+        "readable-stream": "2.3.6",
+        "reinterval": "1.1.0",
+        "split2": "2.2.0",
+        "websocket-stream": "5.1.2",
+        "xtend": "4.0.1"
+      }
+    },
+    "mqtt-packet": {
+      "version": "5.5.0",
+      "resolved": "https://registry.npmjs.org/mqtt-packet/-/mqtt-packet-5.5.0.tgz",
+      "integrity": "sha512-kR+Uw+r9rjUFSLZutmaAhjL4Y1asKLMTwE++PP0iuApJuc+zItE5v2LluQN2K3Pri5e2+K4V++QDjqGTgle/+A==",
+      "requires": {
+        "bl": "1.2.2",
+        "inherits": "2.0.3",
+        "process-nextick-args": "2.0.0",
+        "safe-buffer": "5.1.2"
+      }
+    },
+    "ms": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
+    },
+    "node-crontab": {
+      "version": "0.0.8",
+      "resolved": "https://registry.npmjs.org/node-crontab/-/node-crontab-0.0.8.tgz",
+      "integrity": "sha1-LbFiFBk4PQduzpCDvBhKTp6z7A8=",
+      "requires": {
+        "cron-parser": "0.3.6"
+      }
+    },
+    "node-int64": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
+      "integrity": "sha1-h6kGXNs1XTGC2PlM4RGIuCXGijs="
+    },
+    "node-uuid": {
+      "version": "1.4.8",
+      "resolved": "https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.8.tgz",
+      "integrity": "sha1-sEDrCSOWivq/jTL7HxfxFn/auQc="
+    },
+    "nodejs-websocket": {
+      "version": "1.7.1",
+      "resolved": "https://registry.npmjs.org/nodejs-websocket/-/nodejs-websocket-1.7.1.tgz",
+      "integrity": "sha1-zM+7qCO/HPqWgPFoq3q1MSHkhBA="
+    },
+    "oauth-sign": {
+      "version": "0.8.2",
+      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz",
+      "integrity": "sha1-Rqarfwrq2N6unsBWV4C31O/rnUM="
+    },
+    "once": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
+      "requires": {
+        "wrappy": "1.0.2"
+      }
+    },
+    "ordered-read-streams": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/ordered-read-streams/-/ordered-read-streams-1.0.1.tgz",
+      "integrity": "sha1-d8DLN8QVJdZBZtmQ/61+xqDhNj4=",
+      "requires": {
+        "readable-stream": "2.3.6"
+      }
+    },
+    "os-tmpdir": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
+      "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ="
+    },
+    "path-dirname": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/path-dirname/-/path-dirname-1.0.2.tgz",
+      "integrity": "sha1-zDPSTVJeCZpTiMAzbG4yuRYGCeA="
+    },
+    "path-is-absolute": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
+      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18="
+    },
+    "pem": {
+      "version": "1.12.5",
+      "resolved": "https://registry.npmjs.org/pem/-/pem-1.12.5.tgz",
+      "integrity": "sha512-mm8gLf4ZCaY6Qdm8J4bBdHs6SO4px71FspxgC2jJ0vXf3PYNZnGhU9zITCxpzFHpLPHsHU3xRBbuXNxEWuWziQ==",
+      "requires": {
+        "md5": "2.2.1",
+        "os-tmpdir": "1.0.2",
+        "safe-buffer": "5.1.2",
+        "which": "1.3.0"
+      }
+    },
+    "performance-now": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
+      "integrity": "sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="
+    },
+    "pinkie": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/pinkie/-/pinkie-2.0.4.tgz",
+      "integrity": "sha1-clVrgM+g1IqXToDnckjoDtT3+HA="
+    },
+    "pinkie-promise": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz",
+      "integrity": "sha1-ITXW36ejWMBprJsXh3YogihFD/o=",
+      "requires": {
+        "pinkie": "2.0.4"
+      }
+    },
+    "prettyjson": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/prettyjson/-/prettyjson-1.2.1.tgz",
+      "integrity": "sha1-/P+rQdGcq0365eV15kJGYZsS0ok=",
+      "requires": {
+        "colors": "1.2.3",
+        "minimist": "1.2.0"
+      },
+      "dependencies": {
+        "colors": {
+          "version": "1.2.3",
+          "resolved": "https://registry.npmjs.org/colors/-/colors-1.2.3.tgz",
+          "integrity": "sha512-qTfM2pNFeMZcLvf/RbrVAzDEVttZjFhaApfx9dplNjvHSX88Ui66zBRb/4YGob/xUWxDceirgoC1lT676asfCQ=="
+        }
+      }
+    },
+    "process-nextick-args": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.0.tgz",
+      "integrity": "sha512-MtEC1TqN0EU5nephaJ4rAtThHtC86dNN9qCuEhtshvpVBkAW5ZO7BASN9REnF9eoXGcRub+pFuKEpOHE+HbEMw=="
+    },
+    "pump": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
+      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
+      "requires": {
+        "end-of-stream": "1.4.1",
+        "once": "1.4.0"
+      }
+    },
+    "pumpify": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/pumpify/-/pumpify-1.4.0.tgz",
+      "integrity": "sha512-2kmNR9ry+Pf45opRVirpNuIFotsxUGLaYqxIwuR77AYrYRMuFCz9eryHBS52L360O+NcR383CL4QYlMKPq4zYA==",
+      "requires": {
+        "duplexify": "3.5.4",
+        "inherits": "2.0.3",
+        "pump": "2.0.1"
+      },
+      "dependencies": {
+        "pump": {
+          "version": "2.0.1",
+          "resolved": "https://registry.npmjs.org/pump/-/pump-2.0.1.tgz",
+          "integrity": "sha512-ruPMNRkN3MHP1cWJc9OWr+T/xDP0jhXYCLfJcBuX54hhfIBnaQmAUMfDcG4DM5UMWByBbJY69QSphm3jtDKIkA==",
+          "requires": {
+            "end-of-stream": "1.4.1",
+            "once": "1.4.0"
+          }
+        }
+      }
+    },
+    "punycode": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
+      "integrity": "sha1-wNWmOycYgArY4esPpSachN1BhF4="
+    },
+    "qs": {
+      "version": "6.5.1",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.1.tgz",
+      "integrity": "sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A=="
+    },
+    "readable-stream": {
+      "version": "2.3.6",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz",
+      "integrity": "sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==",
+      "requires": {
+        "core-util-is": "1.0.2",
+        "inherits": "2.0.3",
+        "isarray": "1.0.0",
+        "process-nextick-args": "2.0.0",
+        "safe-buffer": "5.1.2",
+        "string_decoder": "1.1.1",
+        "util-deprecate": "1.0.2"
+      }
+    },
+    "reinterval": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/reinterval/-/reinterval-1.1.0.tgz",
+      "integrity": "sha1-M2Hs+jymwYKDOA3Qu5VG85D17Oc="
+    },
+    "remove-trailing-separator": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz",
+      "integrity": "sha1-wkvOKig62tW8P1jg1IJJuSN52O8="
+    },
+    "request": {
+      "version": "2.83.0",
+      "resolved": "https://registry.npmjs.org/request/-/request-2.83.0.tgz",
+      "integrity": "sha512-lR3gD69osqm6EYLk9wB/G1W/laGWjzH90t1vEa2xuxHD5KUrSzp9pUSfTm+YC5Nxt2T8nMPEvKlhbQayU7bgFw==",
+      "requires": {
+        "aws-sign2": "0.7.0",
+        "aws4": "1.7.0",
+        "caseless": "0.12.0",
+        "combined-stream": "1.0.6",
+        "extend": "3.0.1",
+        "forever-agent": "0.6.1",
+        "form-data": "2.3.2",
+        "har-validator": "5.0.3",
+        "hawk": "6.0.2",
+        "http-signature": "1.2.0",
+        "is-typedarray": "1.0.0",
+        "isstream": "0.1.2",
+        "json-stringify-safe": "5.0.1",
+        "mime-types": "2.1.18",
+        "oauth-sign": "0.8.2",
+        "performance-now": "2.1.0",
+        "qs": "6.5.1",
+        "safe-buffer": "5.1.2",
+        "stringstream": "0.0.5",
+        "tough-cookie": "2.3.4",
+        "tunnel-agent": "0.6.0",
+        "uuid": "3.2.1"
+      },
+      "dependencies": {
+        "extend": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.1.tgz",
+          "integrity": "sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ="
+        },
+        "uuid": {
+          "version": "3.2.1",
+          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz",
+          "integrity": "sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="
+        }
+      }
+    },
+    "safe-buffer": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
+      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
+    },
+    "sax": {
+      "version": "0.5.8",
+      "resolved": "https://registry.npmjs.org/sax/-/sax-0.5.8.tgz",
+      "integrity": "sha1-1HLbIo6zMcJQaw6MFVJK25OdEsE="
+    },
+    "sntp": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/sntp/-/sntp-2.1.0.tgz",
+      "integrity": "sha512-FL1b58BDrqS3A11lJ0zEdnJ3UOKqVxawAkF3k7F0CVN7VQ34aZrV+G8BZ1WC9ZL7NyrwsW0oviwsWDgRuVYtJg==",
+      "requires": {
+        "hoek": "4.2.1"
+      }
+    },
+    "split2": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/split2/-/split2-2.2.0.tgz",
+      "integrity": "sha512-RAb22TG39LhI31MbreBgIuKiIKhVsawfTgEGqKHTK87aG+ul/PB8Sqoi3I7kVdRWiCfrKxK3uo4/YUkpNvhPbw==",
+      "requires": {
+        "through2": "2.0.3"
+      }
+    },
+    "sshpk": {
+      "version": "1.14.1",
+      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.14.1.tgz",
+      "integrity": "sha1-Ew9Zde3a2WPx1W+SuaxsUfqfg+s=",
+      "requires": {
+        "asn1": "0.2.3",
+        "assert-plus": "1.0.0",
+        "bcrypt-pbkdf": "1.0.1",
+        "dashdash": "1.14.1",
+        "ecc-jsbn": "0.1.1",
+        "getpass": "0.1.7",
+        "jsbn": "0.1.1",
+        "tweetnacl": "0.14.5"
+      }
+    },
+    "stately.js": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/stately.js/-/stately.js-1.3.0.tgz",
+      "integrity": "sha1-UtDRwVKgaaZ8sUUDrF3c24vh13c="
+    },
+    "stream-shift": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/stream-shift/-/stream-shift-1.0.0.tgz",
+      "integrity": "sha1-1cdSgl5TZ+eG944Y5EXqIjoVWVI="
+    },
+    "string_decoder": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
+      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
+      "requires": {
+        "safe-buffer": "5.1.2"
+      }
+    },
+    "stringstream": {
+      "version": "0.0.5",
+      "resolved": "https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz",
+      "integrity": "sha1-TkhM1N5aC7vuGORjB3EKioFiGHg="
+    },
+    "strip-ansi": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz",
+      "integrity": "sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=",
+      "requires": {
+        "ansi-regex": "2.1.1"
+      }
+    },
+    "supports-color": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-2.0.0.tgz",
+      "integrity": "sha1-U10EXOa2Nj+kARcIRimZXp3zJMc="
+    },
+    "through2": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/through2/-/through2-2.0.3.tgz",
+      "integrity": "sha1-AARWmzfHx0ujnEPzzteNGtlBQL4=",
+      "requires": {
+        "readable-stream": "2.3.6",
+        "xtend": "4.0.1"
+      }
+    },
+    "through2-filter": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/through2-filter/-/through2-filter-2.0.0.tgz",
+      "integrity": "sha1-YLxVoNrLdghdsfna6Zq0P4PWIuw=",
+      "requires": {
+        "through2": "2.0.3",
+        "xtend": "4.0.1"
+      }
+    },
+    "to-absolute-glob": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/to-absolute-glob/-/to-absolute-glob-2.0.2.tgz",
+      "integrity": "sha1-GGX0PZ50sIItufFFt4z/fQ98hJs=",
+      "requires": {
+        "is-absolute": "1.0.0",
+        "is-negated-glob": "1.0.0"
+      }
+    },
+    "tough-cookie": {
+      "version": "2.3.4",
+      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.4.tgz",
+      "integrity": "sha512-TZ6TTfI5NtZnuyy/Kecv+CnoROnyXn2DN97LontgQpCwsX2XyLYCC0ENhYkehSOwAp8rTQKc/NUIF7BkQ5rKLA==",
+      "requires": {
+        "punycode": "1.4.1"
+      }
+    },
+    "traverse": {
+      "version": "0.6.6",
+      "resolved": "https://registry.npmjs.org/traverse/-/traverse-0.6.6.tgz",
+      "integrity": "sha1-y99WD9e5r2MlAv7UD5GMFX6pcTc="
+    },
     "tree-kill": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.0.tgz",
       "integrity": "sha512-DlX6dR0lOIRDFxI0mjL9IYg6OTncLm/Zt+JiBhE5OlFcAR8yc9S7FFXU9so0oda47frdM/JFsk7UjNt9vscKcg=="
+    },
+    "tunnel-agent": {
+      "version": "0.6.0",
+      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
+      "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
+      "requires": {
+        "safe-buffer": "5.1.2"
+      }
+    },
+    "tweetnacl": {
+      "version": "0.14.5",
+      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
+      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=",
+      "optional": true
+    },
+    "typedarray": {
+      "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
+      "integrity": "sha1-hnrHTjhkGHsdPUfZlqeOxciDB3c="
+    },
+    "ultron": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/ultron/-/ultron-1.1.1.tgz",
+      "integrity": "sha512-UIEXBNeYmKptWH6z8ZnqTeS8fV74zG0/eRU9VGkpzz+LIJNs8W/zM/L+7ctCkRrgbNnnR0xxw4bKOr0cW0N0Og=="
+    },
+    "unc-path-regex": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/unc-path-regex/-/unc-path-regex-0.1.2.tgz",
+      "integrity": "sha1-5z3T17DXxe2G+6xrCufYxqadUPo="
+    },
+    "underscore": {
+      "version": "1.8.3",
+      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.8.3.tgz",
+      "integrity": "sha1-Tz+1OxBuYJf8+ctBCfKl6b36UCI="
+    },
+    "unique-stream": {
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/unique-stream/-/unique-stream-2.2.1.tgz",
+      "integrity": "sha1-WqADz76Uxf+GbE59ZouxxNuts2k=",
+      "requires": {
+        "json-stable-stringify": "1.0.1",
+        "through2-filter": "2.0.0"
+      }
+    },
+    "util-deprecate": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
+    },
+    "uuid": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-2.0.3.tgz",
+      "integrity": "sha1-Z+LoY3lyFVMN/zGOW/nc6/1Hsho="
+    },
+    "validator": {
+      "version": "9.4.1",
+      "resolved": "https://registry.npmjs.org/validator/-/validator-9.4.1.tgz",
+      "integrity": "sha512-YV5KjzvRmSyJ1ee/Dm5UED0G+1L4GZnLN3w6/T+zZm8scVua4sOhYKWTUrKa0H/tMiJyO9QLHMPN+9mB/aMunA=="
+    },
+    "verror": {
+      "version": "1.10.0",
+      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
+      "integrity": "sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=",
+      "requires": {
+        "assert-plus": "1.0.0",
+        "core-util-is": "1.0.2",
+        "extsprintf": "1.3.0"
+      }
+    },
+    "websocket-stream": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/websocket-stream/-/websocket-stream-5.1.2.tgz",
+      "integrity": "sha512-lchLOk435iDWs0jNuL+hiU14i3ERSrMA0IKSiJh7z6X/i4XNsutBZrtqu2CPOZuA4G/zabiqVAos0vW+S7GEVw==",
+      "requires": {
+        "duplexify": "3.5.4",
+        "inherits": "2.0.3",
+        "readable-stream": "2.3.6",
+        "safe-buffer": "5.1.2",
+        "ws": "3.3.3",
+        "xtend": "4.0.1"
+      }
+    },
+    "which": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/which/-/which-1.3.0.tgz",
+      "integrity": "sha512-xcJpopdamTuY5duC/KnTTNBraPK54YwpenP4lzxU8H91GudWpFv38u0CKjclE1Wi2EH2EDz5LRcHcKbCIzqGyg==",
+      "requires": {
+        "isexe": "2.0.0"
+      }
+    },
+    "wrappy": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
+    },
+    "ws": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-3.3.3.tgz",
+      "integrity": "sha512-nnWLa/NwZSt4KQJu51MYlCcSQ5g7INpOrOMt4XV8j4dqTXdmlUmSHQ8/oLC069ckre0fRsgfvsKwbTdtKLCDkA==",
+      "requires": {
+        "async-limiter": "1.0.0",
+        "safe-buffer": "5.1.2",
+        "ultron": "1.1.1"
+      }
+    },
+    "xml2js": {
+      "version": "0.2.8",
+      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.2.8.tgz",
+      "integrity": "sha1-m4FpCTFjH/CdGVdUn69U9PmAs8I=",
+      "requires": {
+        "sax": "0.5.8"
+      }
+    },
+    "xmlbuilder": {
+      "version": "0.4.3",
+      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-0.4.3.tgz",
+      "integrity": "sha1-xGFLp04K0ZbmCcknLNnh3bKKilg="
+    },
+    "xtend": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.1.tgz",
+      "integrity": "sha1-pcbVMr5lbiPbgg77lDofBJmNY68="
     }
   }
 }

From 0d0fa62988d2daceaaaad1742d8304270e93409a Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Tue, 1 May 2018 22:33:39 -0700
Subject: [PATCH 26/44] fixed bug the prevented arguments to be handled
 correctly

---
 docker/build.sh | 48 +++++++++++++++++++++++++++++++++---------------
 1 file changed, 33 insertions(+), 15 deletions(-)

diff --git a/docker/build.sh b/docker/build.sh
index 672bf7d..30c2ec9 100644
--- a/docker/build.sh
+++ b/docker/build.sh
@@ -39,7 +39,12 @@ function build_linux
     check_docker_expected_mode "linux"
 
     cd linux
-    docker build -f Dockerfile -t microsoft/iotedgedev:$VERSION-linux -t microsoft/iotedgedev:latest-linux .
+    docker build \
+        -f Dockerfile \
+        --no-cache \
+        -t microsoft/iotedgedev:$VERSION-linux \
+        -t microsoft/iotedgedev:latest-linux \
+        .
 
     cd ..
 }
@@ -51,25 +56,38 @@ function build_windows
     check_docker_expected_mode "windows"
 
     cd windows
-    docker build --build-arg PYTHON2_VERSION=$PYTHON2 --build-arg PYTHON3_VERSION=$PYTHON3 -f Dockerfile -t microsoft/iotedgedev:$VERSION-windows -t microsoft/iotedgedev:latest-windows .
+    docker build \
+        --build-arg PYTHON2_VERSION=$PYTHON2 \
+        --build-arg PYTHON3_VERSION=$PYTHON3 \
+        -f Dockerfile \
+        --no-cache \
+        -t microsoft/iotedgedev:$VERSION-windows \
+        -t microsoft/iotedgedev:latest-windows \
+        .
 
     cd ..
 }
 
-if [ $1 = "--help" ]; then    
-    echo "Usage:"
-    echo "build.sh [linux|windows]"
-    exit 1
-fi
-
-if [ $1 = "linux" ]; then
-    build_windows=0
-    echo "===== Building Linux image only"
-fi
+if [ ! -z "$1" ];  then
+    if [ "$1" = "--help" ]; then    
+        echo "Usage:"
+        echo "build.sh [linux|windows]"
+        exit 1
+    fi
 
-if [ $1 = "windows" ]; then
-    build_linux=0
-    echo "===== Building Windows image only"
+    if [ "$1" = "linux" ]; then
+        build_windows=0
+        echo "===== Building Linux image only"
+    elif [ "$1" = "windows" ]; then
+        build_linux=0
+        echo "===== Building Windows image only"
+    else
+        echo "Unknown option: $1"
+        echo "Use --help for help"
+        exit 1
+    fi
+else
+    echo "===== Building Windows and Linux images"
 fi
 
 mode=$(get_docker_mode)

From 556e52a54dfbd37b7de0b07e7e873ea32be14750 Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Tue, 1 May 2018 22:33:39 -0700
Subject: [PATCH 27/44] fixed bug the prevented arguments to be handled
 correctly

---
 docker/build.sh        | 48 +++++++++++++++++++++++++++++-------------
 iotedgedev/__init__.py |  2 +-
 setup.cfg              |  2 +-
 setup.py               |  2 +-
 4 files changed, 36 insertions(+), 18 deletions(-)

diff --git a/docker/build.sh b/docker/build.sh
index 672bf7d..30c2ec9 100644
--- a/docker/build.sh
+++ b/docker/build.sh
@@ -39,7 +39,12 @@ function build_linux
     check_docker_expected_mode "linux"
 
     cd linux
-    docker build -f Dockerfile -t microsoft/iotedgedev:$VERSION-linux -t microsoft/iotedgedev:latest-linux .
+    docker build \
+        -f Dockerfile \
+        --no-cache \
+        -t microsoft/iotedgedev:$VERSION-linux \
+        -t microsoft/iotedgedev:latest-linux \
+        .
 
     cd ..
 }
@@ -51,25 +56,38 @@ function build_windows
     check_docker_expected_mode "windows"
 
     cd windows
-    docker build --build-arg PYTHON2_VERSION=$PYTHON2 --build-arg PYTHON3_VERSION=$PYTHON3 -f Dockerfile -t microsoft/iotedgedev:$VERSION-windows -t microsoft/iotedgedev:latest-windows .
+    docker build \
+        --build-arg PYTHON2_VERSION=$PYTHON2 \
+        --build-arg PYTHON3_VERSION=$PYTHON3 \
+        -f Dockerfile \
+        --no-cache \
+        -t microsoft/iotedgedev:$VERSION-windows \
+        -t microsoft/iotedgedev:latest-windows \
+        .
 
     cd ..
 }
 
-if [ $1 = "--help" ]; then    
-    echo "Usage:"
-    echo "build.sh [linux|windows]"
-    exit 1
-fi
-
-if [ $1 = "linux" ]; then
-    build_windows=0
-    echo "===== Building Linux image only"
-fi
+if [ ! -z "$1" ];  then
+    if [ "$1" = "--help" ]; then    
+        echo "Usage:"
+        echo "build.sh [linux|windows]"
+        exit 1
+    fi
 
-if [ $1 = "windows" ]; then
-    build_linux=0
-    echo "===== Building Windows image only"
+    if [ "$1" = "linux" ]; then
+        build_windows=0
+        echo "===== Building Linux image only"
+    elif [ "$1" = "windows" ]; then
+        build_linux=0
+        echo "===== Building Windows image only"
+    else
+        echo "Unknown option: $1"
+        echo "Use --help for help"
+        exit 1
+    fi
+else
+    echo "===== Building Windows and Linux images"
 fi
 
 mode=$(get_docker_mode)
diff --git a/iotedgedev/__init__.py b/iotedgedev/__init__.py
index 6cf4626..e309812 100644
--- a/iotedgedev/__init__.py
+++ b/iotedgedev/__init__.py
@@ -4,4 +4,4 @@
 
 __author__ = 'Jon Gallant'
 __email__ = 'info@jongallant.com'
-__version__ = '0.81.0'
+__version__ = '0.86.0'
diff --git a/setup.cfg b/setup.cfg
index 8d4e954..11e09e9 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,5 +1,5 @@
 [bumpversion]
-current_version = 0.81.0
+current_version = 0.86.0
 commit = True
 tag = True
 
diff --git a/setup.py b/setup.py
index 6128ec0..477c2c6 100644
--- a/setup.py
+++ b/setup.py
@@ -53,7 +53,7 @@ def run(self):
 
 setup(
     name='iotedgedev',
-    version='0.81.0',
+    version='0.86.0',
     description="The Azure IoT Edge Dev Tool greatly simplifies the IoT Edge development process by automating many routine manual tasks, such as building, deploying, pushing modules and configuring the IoT Edge Runtime.",
     long_description="See https://github.com/azure/iotedgedev for usage instructions.",
     author="Jon Gallant",

From e9b9aca4ce03e5595244f8be30d95d48c42b1c3b Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Thu, 3 May 2018 13:31:39 -0700
Subject: [PATCH 28/44] added build script alpha version

---
 build.sh                             | 49 ++++++++++++++++++++++++++++
 docker/{build.sh => build-docker.sh} |  2 +-
 2 files changed, 50 insertions(+), 1 deletion(-)
 create mode 100644 build.sh
 rename docker/{build.sh => build-docker.sh} (98%)

diff --git a/build.sh b/build.sh
new file mode 100644
index 0000000..cca3f34
--- /dev/null
+++ b/build.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+# stop on error
+set -e
+
+echo "===== Checking pre-requisistes"
+IS_ADMIN=$(powershell '([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")')
+if [ "$IS_ADMIN" = "False" ]; then        
+    echo "build script must be run as administrator"
+    exit 1
+fi
+
+#TODO
+# check if running in administrator mode
+# make sure docker is in linux mode
+# stop and restart docker to make sure to avoid networking problem?
+
+echo "===== Preventive cleanup"
+rm __pycache__ -rf
+rm .pytest_cache -rf
+rm .tox -rf
+rm .pytest_cache -rf
+rm tests/__pycache__ -rf
+
+echo "===== Running smoke tests"
+#tox
+
+echo "===== Bumping version"
+bumpversion minor
+
+echo "===== Building Python Wheel"
+python setup.py bdist_wheel 
+
+echo "===== Uploading to PyPi"
+VERSION=$(cat ./iotedgedev/__init__.py | grep '__version__' | grep -oP "'\K[^']+")
+twine upload --repository-url https://test.pypi.org/legacy/  dist/iotedgedev-$VERSION-py2.py3-none-any.whl
+
+echo "===== Building Docker images"
+cd docker
+./build-docker.sh
+
+echo "===== Pushing Docker images"
+#TODO
+
+echo "===== Creating Multi-Arch Docker image"
+#TODO
+
+echo "===== Pushing Docker Multi-Arch image"
+#TODO
diff --git a/docker/build.sh b/docker/build-docker.sh
similarity index 98%
rename from docker/build.sh
rename to docker/build-docker.sh
index 30c2ec9..903c046 100644
--- a/docker/build.sh
+++ b/docker/build-docker.sh
@@ -71,7 +71,7 @@ function build_windows
 if [ ! -z "$1" ];  then
     if [ "$1" = "--help" ]; then    
         echo "Usage:"
-        echo "build.sh [linux|windows]"
+        echo "build-docker.sh [linux|windows]"
         exit 1
     fi
 

From 26b985ec2c5897a03bccc0ebcb94f97e696b31d9 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Thu, 3 May 2018 13:33:31 -0700
Subject: [PATCH 29/44] comments cleanup

---
 build.sh               | 2 +-
 docker/build-docker.sh | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/build.sh b/build.sh
index cca3f34..6ad14d4 100644
--- a/build.sh
+++ b/build.sh
@@ -23,7 +23,7 @@ rm .pytest_cache -rf
 rm tests/__pycache__ -rf
 
 echo "===== Running smoke tests"
-#tox
+tox
 
 echo "===== Bumping version"
 bumpversion minor
diff --git a/docker/build-docker.sh b/docker/build-docker.sh
index 903c046..a587a64 100644
--- a/docker/build-docker.sh
+++ b/docker/build-docker.sh
@@ -3,7 +3,7 @@
 # read IoTEdgeDev version from python __init__ file
 export VERSION=$(cat ../iotedgedev/__init__.py | grep '__version__' | grep -oP "'\K[^']+")
 
-PYTHON2="2.7.14"
+PYTHON2="2.7.14" #TODO READ FROM deps.txt
 PYTHON3="3.6.5"
 
 build_linux=1

From aab1f91d88e1fabd901b2734bc67f717c3563922 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Tue, 8 May 2018 13:26:38 -0700
Subject: [PATCH 30/44] build will now also push docker images

---
 build.sh | 74 ++++++++++++++++++++++++++++++++++++++++++++------------
 1 file changed, 58 insertions(+), 16 deletions(-)

diff --git a/build.sh b/build.sh
index 6ad14d4..9079e31 100644
--- a/build.sh
+++ b/build.sh
@@ -3,47 +3,89 @@
 # stop on error
 set -e
 
-echo "===== Checking pre-requisistes"
+function show_help
+{
+    echo "Usage:"
+    echo "build.sh <mode> <dockerhub>"
+    echo ""
+    echo "mode: test|prod"
+    echo "dockerhub: docker hub name (eg:microsoft/iotedgedev) used for pushing created images"
+    exit 1
+}
+
+MODE="$1"
+DOCKERHUB="$2"
+
+if [ -z "$MODE" ] && [ -z "$DOCKERHUB" ]; then
+    show_help
+fi
+
+echo -e "\n===== Setting up build environment"
+if [ "$MODE" = "prod" ]; then
+    PIPYREPO="https://test.pypi.org/legacy/"
+elif [ "$MODE" = "test" ]; then
+    PIPYREPO="https://pypi.org/legacy/"
+else
+    echo "ERROR> Build mode parameter not known. must be 'prod' or 'test'"
+    exit 1
+fi
+echo "Building for: $MODE"
+if [ -z "$DOCKERHUB" ]; then
+    echo "ERROR>Build mode docker hub target not specified."
+    exit 1
+fi
+echo "Target Docker Hub: $DOCKERHUB"
+
+
+echo -e "\n===== Checking pre-requisistes"
 IS_ADMIN=$(powershell '([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")')
 if [ "$IS_ADMIN" = "False" ]; then        
-    echo "build script must be run as administrator"
+    echo "ERROR> Build script must be run as administrator"
     exit 1
 fi
 
 #TODO
 # check if running in administrator mode
 # make sure docker is in linux mode
+# make sure docker supports manifest option
 # stop and restart docker to make sure to avoid networking problem?
+# check that dockerhub exists and is accessible
+# check that pipy repo exists and is accessible
 
-echo "===== Preventive cleanup"
+echo -e "\n===== Preventive cleanup"
 rm __pycache__ -rf
 rm .pytest_cache -rf
 rm .tox -rf
 rm .pytest_cache -rf
 rm tests/__pycache__ -rf
 
-echo "===== Running smoke tests"
+echo -e "\n===== Running smoke tests"
 tox
 
-echo "===== Bumping version"
+echo -e "\n===== Bumping version"
 bumpversion minor
+VERSION=$(cat ./iotedgedev/__init__.py | grep '__version__' | grep -oP "'\K[^']+")
 
-echo "===== Building Python Wheel"
+echo -e "\n===== Building Python Wheel"
 python setup.py bdist_wheel 
 
-echo "===== Uploading to PyPi"
-VERSION=$(cat ./iotedgedev/__init__.py | grep '__version__' | grep -oP "'\K[^']+")
-twine upload --repository-url https://test.pypi.org/legacy/  dist/iotedgedev-$VERSION-py2.py3-none-any.whl
+echo -e "\n===== Uploading to PyPi"
+twine upload --repository-url $PIPYREPO  dist/iotedgedev-$VERSION-py2.py3-none-any.whl
 
-echo "===== Building Docker images"
+echo -e "\n===== Building Docker images"
 cd docker
 ./build-docker.sh
 
-echo "===== Pushing Docker images"
-#TODO
+echo -e "\n===== Pushing Docker images"
+docker push $DOCKERHUB:$VERSION-linux 
+docker push $DOCKERHUB:latest-linux 
+docker push $DOCKERHUB:$VERSION-windows 
+docker push $DOCKERHUB:latest-windows 
 
-echo "===== Creating Multi-Arch Docker image"
-#TODO
+echo -e "\n===== Creating Multi-Arch Docker image"
+docker manifest create $DOCKERHUB:latest $DOCKERHUB:latest-linux $DOCKERHUB:latest-windows 
 
-echo "===== Pushing Docker Multi-Arch image"
-#TODO
+echo -e "\n===== Pushing Docker Multi-Arch image"
+docker manifest push
+
+echo -e "\n===== All done"

From 97aa237cd0bd90256a69571db57ff599071ea47e Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Tue, 8 May 2018 13:36:54 -0700
Subject: [PATCH 31/44] =?UTF-8?q?Bump=20version:=200.86.0=20=E2=86=92=200.?=
 =?UTF-8?q?87.0?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 iotedgedev/__init__.py | 2 +-
 setup.cfg              | 2 +-
 setup.py               | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/iotedgedev/__init__.py b/iotedgedev/__init__.py
index e309812..3ed8a67 100644
--- a/iotedgedev/__init__.py
+++ b/iotedgedev/__init__.py
@@ -4,4 +4,4 @@
 
 __author__ = 'Jon Gallant'
 __email__ = 'info@jongallant.com'
-__version__ = '0.86.0'
+__version__ = '0.87.0'
diff --git a/setup.cfg b/setup.cfg
index 11e09e9..b74bb01 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,5 +1,5 @@
 [bumpversion]
-current_version = 0.86.0
+current_version = 0.87.0
 commit = True
 tag = True
 
diff --git a/setup.py b/setup.py
index 477c2c6..4053e08 100644
--- a/setup.py
+++ b/setup.py
@@ -53,7 +53,7 @@ def run(self):
 
 setup(
     name='iotedgedev',
-    version='0.86.0',
+    version='0.87.0',
     description="The Azure IoT Edge Dev Tool greatly simplifies the IoT Edge development process by automating many routine manual tasks, such as building, deploying, pushing modules and configuring the IoT Edge Runtime.",
     long_description="See https://github.com/azure/iotedgedev for usage instructions.",
     author="Jon Gallant",

From 3030d65c3fcf421f0417776cdc3717c64b8f8295 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Tue, 8 May 2018 14:16:06 -0700
Subject: [PATCH 32/44] version set back to 0.81.0

---
 iotedgedev/__init__.py | 2 +-
 setup.cfg              | 2 +-
 setup.py               | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/iotedgedev/__init__.py b/iotedgedev/__init__.py
index 3ed8a67..6cf4626 100644
--- a/iotedgedev/__init__.py
+++ b/iotedgedev/__init__.py
@@ -4,4 +4,4 @@
 
 __author__ = 'Jon Gallant'
 __email__ = 'info@jongallant.com'
-__version__ = '0.87.0'
+__version__ = '0.81.0'
diff --git a/setup.cfg b/setup.cfg
index b74bb01..8d4e954 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,5 +1,5 @@
 [bumpversion]
-current_version = 0.87.0
+current_version = 0.81.0
 commit = True
 tag = True
 
diff --git a/setup.py b/setup.py
index 4053e08..6128ec0 100644
--- a/setup.py
+++ b/setup.py
@@ -53,7 +53,7 @@ def run(self):
 
 setup(
     name='iotedgedev',
-    version='0.87.0',
+    version='0.81.0',
     description="The Azure IoT Edge Dev Tool greatly simplifies the IoT Edge development process by automating many routine manual tasks, such as building, deploying, pushing modules and configuring the IoT Edge Runtime.",
     long_description="See https://github.com/azure/iotedgedev for usage instructions.",
     author="Jon Gallant",

From 028442b7701263ba42568307895edb45d09f2311 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Tue, 8 May 2018 14:16:39 -0700
Subject: [PATCH 33/44] fixed some bugs, added parameter for pipy login

---
 build.sh | 26 +++++++++++++++++++-------
 1 file changed, 19 insertions(+), 7 deletions(-)

diff --git a/build.sh b/build.sh
index 9079e31..d401dac 100644
--- a/build.sh
+++ b/build.sh
@@ -6,24 +6,26 @@ set -e
 function show_help
 {
     echo "Usage:"
-    echo "build.sh <mode> <dockerhub>"
+    echo "build.sh <mode> <dockerhub> <pipyaccount>"
     echo ""
     echo "mode: test|prod"
     echo "dockerhub: docker hub name (eg:microsoft/iotedgedev) used for pushing created images"
+    echo "pipyaccount: account name used to login into PyPi repository"
     exit 1
 }
 
 MODE="$1"
 DOCKERHUB="$2"
+PIPYUSER="$3"
 
 if [ -z "$MODE" ] && [ -z "$DOCKERHUB" ]; then
     show_help
 fi
 
 echo -e "\n===== Setting up build environment"
-if [ "$MODE" = "prod" ]; then
+if [ "$MODE" = "test" ]; then
     PIPYREPO="https://test.pypi.org/legacy/"
-elif [ "$MODE" = "test" ]; then
+elif [ "$MODE" = "prod" ]; then
     PIPYREPO="https://pypi.org/legacy/"
 else
     echo "ERROR> Build mode parameter not known. must be 'prod' or 'test'"
@@ -31,7 +33,12 @@ else
 fi
 echo "Building for: $MODE"
 if [ -z "$DOCKERHUB" ]; then
-    echo "ERROR>Build mode docker hub target not specified."
+    echo "ERROR> Build mode docker hub target not specified."
+    exit 1
+fi
+echo "PyPi account used: $PIPYUSER"
+if [ -z "$PIPYUSER" ]; then
+    echo "ERROR> PyPi account name not specified."
     exit 1
 fi
 echo "Target Docker Hub: $DOCKERHUB"
@@ -51,6 +58,7 @@ fi
 # stop and restart docker to make sure to avoid networking problem?
 # check that dockerhub exists and is accessible
 # check that pipy repo exists and is accessible
+# make sure there are no pending changes in GIT otherwise bumpversion will complain
 
 echo -e "\n===== Preventive cleanup"
 rm __pycache__ -rf
@@ -60,17 +68,21 @@ rm .pytest_cache -rf
 rm tests/__pycache__ -rf
 
 echo -e "\n===== Running smoke tests"
-tox
+#tox
 
 echo -e "\n===== Bumping version"
-bumpversion minor
+if [ "$MODE" = "prod" ]; then
+    bumpversion minor
+fi
+
+echo -e "\n===== Detecting version"
 VERSION=$(cat ./iotedgedev/__init__.py | grep '__version__' | grep -oP "'\K[^']+")
 
 echo -e "\n===== Building Python Wheel"
 python setup.py bdist_wheel 
 
 echo -e "\n===== Uploading to PyPi"
-twine upload --repository-url $PIPYREPO  dist/iotedgedev-$VERSION-py2.py3-none-any.whl
+twine upload -u $PIPYUSER --repository-url $PIPYREPO dist/iotedgedev-$VERSION-py2.py3-none-any.whl
 
 echo -e "\n===== Building Docker images"
 cd docker

From 8c328a91290e11c477f39820d3733e31f32f08f0 Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Tue, 8 May 2018 23:08:24 -0700
Subject: [PATCH 34/44] modularized build script

---
 build.sh                | 94 ++++++++++++++++++++---------------------
 docker/build-docker.sh  | 18 ++++++--
 docker/linux/Dockerfile |  1 +
 docker/push-docker.sh   | 44 +++++++++++++++++++
 4 files changed, 104 insertions(+), 53 deletions(-)
 create mode 100644 docker/push-docker.sh

diff --git a/build.sh b/build.sh
index d401dac..e9f98a7 100644
--- a/build.sh
+++ b/build.sh
@@ -6,43 +6,27 @@ set -e
 function show_help
 {
     echo "Usage:"
-    echo "build.sh <mode> <dockerhub> <pipyaccount>"
+    echo "build.sh <mode>"
     echo ""
     echo "mode: test|prod"
-    echo "dockerhub: docker hub name (eg:microsoft/iotedgedev) used for pushing created images"
-    echo "pipyaccount: account name used to login into PyPi repository"
     exit 1
 }
 
 MODE="$1"
-DOCKERHUB="$2"
-PIPYUSER="$3"
 
-if [ -z "$MODE" ] && [ -z "$DOCKERHUB" ]; then
+if [ -z "$MODE" ]; then
     show_help
 fi
 
 echo -e "\n===== Setting up build environment"
 if [ "$MODE" = "test" ]; then
-    PIPYREPO="https://test.pypi.org/legacy/"
+    echo "Environment: TEST"
 elif [ "$MODE" = "prod" ]; then
-    PIPYREPO="https://pypi.org/legacy/"
+    echo "Environment: PROD"
 else
     echo "ERROR> Build mode parameter not known. must be 'prod' or 'test'"
     exit 1
 fi
-echo "Building for: $MODE"
-if [ -z "$DOCKERHUB" ]; then
-    echo "ERROR> Build mode docker hub target not specified."
-    exit 1
-fi
-echo "PyPi account used: $PIPYUSER"
-if [ -z "$PIPYUSER" ]; then
-    echo "ERROR> PyPi account name not specified."
-    exit 1
-fi
-echo "Target Docker Hub: $DOCKERHUB"
-
 
 echo -e "\n===== Checking pre-requisistes"
 IS_ADMIN=$(powershell '([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")')
@@ -60,44 +44,56 @@ fi
 # check that pipy repo exists and is accessible
 # make sure there are no pending changes in GIT otherwise bumpversion will complain
 
-echo -e "\n===== Preventive cleanup"
-rm __pycache__ -rf
-rm .pytest_cache -rf
-rm .tox -rf
-rm .pytest_cache -rf
-rm tests/__pycache__ -rf
+function run_tox {
+    echo -e "\n===== Preventive cleanup"
+    rm __pycache__ -rf
+    rm .pytest_cache -rf
+    rm .tox -rf
+    rm .pytest_cache -rf
+    rm tests/__pycache__ -rf
 
-echo -e "\n===== Running smoke tests"
-#tox
+    echo -e "\n===== Running smoke tests"
+    tox
+}
 
-echo -e "\n===== Bumping version"
-if [ "$MODE" = "prod" ]; then
+function run_bumpversion {
+    echo -e "\n===== Bumping version"
     bumpversion minor
-fi
+}
+
+function run_build
+{
+    echo -e "\n===== Building Python Wheel"
+    python setup.py bdist_wheel 
+}
 
-echo -e "\n===== Detecting version"
-VERSION=$(cat ./iotedgedev/__init__.py | grep '__version__' | grep -oP "'\K[^']+")
+function run_twine
+{
+    echo -e "\n===== Uploading to PyPi"
+    twine upload -u $PIPYUSER --repository-url $PIPYREPO dist/iotedgedev-$VERSION-py2.py3-none-any.whl
+}
 
-echo -e "\n===== Building Python Wheel"
-python setup.py bdist_wheel 
+function run_build_docker
+{
+    ./docker/build-docker.sh
+}
 
-echo -e "\n===== Uploading to PyPi"
-twine upload -u $PIPYUSER --repository-url $PIPYREPO dist/iotedgedev-$VERSION-py2.py3-none-any.whl
+function run_push_docker 
+{
+    ./docker/push-docker.sh $1 $2
+}
 
-echo -e "\n===== Building Docker images"
-cd docker
-./build-docker.sh
 
-echo -e "\n===== Pushing Docker images"
-docker push $DOCKERHUB:$VERSION-linux 
-docker push $DOCKERHUB:latest-linux 
-docker push $DOCKERHUB:$VERSION-windows 
-docker push $DOCKERHUB:latest-windows 
+run_tox
+if [ "$MODE" = "prod" ]; then
+    run_bumpversion
+fi
+run_build
+#run_twine
+#run_build_docker
+#run_push_docker
 
-echo -e "\n===== Creating Multi-Arch Docker image"
-docker manifest create $DOCKERHUB:latest $DOCKERHUB:latest-linux $DOCKERHUB:latest-windows 
 
-echo -e "\n===== Pushing Docker Multi-Arch image"
-docker manifest push
+#./docker/push-docker.sh $DOCKERHUB
 
 echo -e "\n===== All done"
diff --git a/docker/build-docker.sh b/docker/build-docker.sh
index 5a6d689..73fad21 100644
--- a/docker/build-docker.sh
+++ b/docker/build-docker.sh
@@ -1,5 +1,15 @@
 #!/bin/bash
 
+# make sure we're in docker folder
+original_folder=$PWD
+
+if [ -z $"echo $PWD | grep /docker$" ]; then 
+    in_docker_folder=1
+else
+    in_docker_folder=0
+    cd docker
+fi
+
 # read IoTEdgeDev version from python __init__ file
 export VERSION=$(cat ../iotedgedev/__init__.py | grep '__version__' | grep -oP "'\K[^']+")
 
@@ -71,11 +81,7 @@ function build_windows
 if [ ! -z "$1" ];  then
     if [ "$1" = "--help" ]; then    
         echo "Usage:"
-<<<<<<< HEAD:docker/build.sh
-        echo "build.sh [linux|windows]"
-=======
         echo "build-docker.sh [linux|windows]"
->>>>>>> 028442b7701263ba42568307895edb45d09f2311:docker/build-docker.sh
         exit 1
     fi
 
@@ -116,4 +122,8 @@ else
         build_windows
         switch_docker
     fi
+fi
+
+if [ in_docker_folder = 0 ] then;
+    cd original_folder
 fi
\ No newline at end of file
diff --git a/docker/linux/Dockerfile b/docker/linux/Dockerfile
index d980d20..f748450 100644
--- a/docker/linux/Dockerfile
+++ b/docker/linux/Dockerfile
@@ -22,6 +22,7 @@ RUN az extension add --name azure-cli-iot-ext && \
     apt-get update && \
     apt-get install -y --no-install-recommends python-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev && \
     rm -rf /var/lib/apt/lists/*
+RUN python -m pip install --upgrade pip    
 RUN pip install setuptools
 RUN pip --no-cache-dir install -U iotedgedev
 WORKDIR /home/iotedge
diff --git a/docker/push-docker.sh b/docker/push-docker.sh
new file mode 100644
index 0000000..66b1a0a
--- /dev/null
+++ b/docker/push-docker.sh
@@ -0,0 +1,44 @@
+#!/bin/bash
+
+# stop on error
+set -e
+
+function show_help
+{
+    echo "Usage:"
+    echo "push-docker.sh <dockerhub> [<version>]"
+    echo ""
+    echo "dockerhub: docker hub name (eg:microsoft/iotedgedev) used for pushing created images"    
+    echo "version: version to push. Automatically detected if not specified"
+    exit 1
+}
+
+if [ "$1" = "--help" ]; then
+    show_help
+fi
+
+DOCKERHUB="$1"
+
+if [ -z "$DOCKERHUB" ]; then
+    show_help
+fi
+
+if [ -z "$2" ]; then
+    echo -e "\n===== Detecting version"
+    VERSION=$(cat ../iotedgedev/__init__.py | grep '__version__' | grep -oP "'\K[^']+")
+    echo "Detected version $VERSION"
+else
+    VERSION="$2"
+fi
+
+echo -e "\n===== Pushing Docker images"
+docker push $DOCKERHUB:$VERSION-linux 
+docker push $DOCKERHUB:latest-linux 
+docker push $DOCKERHUB:$VERSION-windows 
+docker push $DOCKERHUB:latest-windows 
+
+echo -e "\n===== Creating Multi-Arch Docker image"
+docker manifest create $DOCKERHUB:latest $DOCKERHUB:latest-linux $DOCKERHUB:latest-windows 
+
+echo -e "\n===== Pushing Docker Multi-Arch image"
+docker manifest push

From 51be905c0d5747ce2c3c19f9fc5cef5bbb1adf89 Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Tue, 8 May 2018 23:15:15 -0700
Subject: [PATCH 35/44] fixed syntax

---
 docker/build-docker.sh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/docker/build-docker.sh b/docker/build-docker.sh
index 73fad21..779bb51 100644
--- a/docker/build-docker.sh
+++ b/docker/build-docker.sh
@@ -124,6 +124,6 @@ else
     fi
 fi
 
-if [ in_docker_folder = 0 ] then;
+if [ in_docker_folder = 0 ]; then
     cd original_folder
 fi
\ No newline at end of file

From dc996ad6f01ee66f1833de0edb948fd0f07d1697 Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Tue, 8 May 2018 23:40:27 -0700
Subject: [PATCH 36/44] removed renaming of python3 executables

---
 docker/windows/Dockerfile | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/docker/windows/Dockerfile b/docker/windows/Dockerfile
index e76cc10..2b253cd 100644
--- a/docker/windows/Dockerfile
+++ b/docker/windows/Dockerfile
@@ -20,8 +20,7 @@ RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe'
     (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python3-installer.exe'); \
     $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python3'; \
     Write-Host ('Installing into {0}...' -f $install_folder); \
-    Start-Process python3-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0'); \
-    Rename-Item -Path "..\tools\python3\python.exe" -NewName "python3.exe"
+    Start-Process python3-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0');     
 RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
     Write-Host ('Downloading {0}...' -f $node_url); \
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \

From 846daeaef297366585bcf31bd677fcca4dba1865 Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Wed, 9 May 2018 00:08:12 -0700
Subject: [PATCH 37/44] switch to docker folder if needed

---
 docker/push-docker.sh | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/docker/push-docker.sh b/docker/push-docker.sh
index 66b1a0a..41aff80 100644
--- a/docker/push-docker.sh
+++ b/docker/push-docker.sh
@@ -3,6 +3,16 @@
 # stop on error
 set -e
 
+# make sure we're in docker folder
+original_folder=$PWD
+
+if [ -z $"echo $PWD | grep /docker$" ]; then 
+    in_docker_folder=1
+else
+    in_docker_folder=0
+    cd docker
+fi
+
 function show_help
 {
     echo "Usage:"
@@ -42,3 +52,7 @@ docker manifest create $DOCKERHUB:latest $DOCKERHUB:latest-linux $DOCKERHUB:late
 
 echo -e "\n===== Pushing Docker Multi-Arch image"
 docker manifest push
+
+if [ in_docker_folder = 0 ]; then
+    cd original_folder
+fi
\ No newline at end of file

From 90264f43160641894d601176a9a6934a5c4898bf Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Wed, 9 May 2018 00:08:23 -0700
Subject: [PATCH 38/44] exit on error

---
 docker/build-docker.sh | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/docker/build-docker.sh b/docker/build-docker.sh
index 779bb51..7f2ca93 100644
--- a/docker/build-docker.sh
+++ b/docker/build-docker.sh
@@ -1,5 +1,8 @@
 #!/bin/bash
 
+# stop on error
+set -e
+
 # make sure we're in docker folder
 original_folder=$PWD
 

From 385ff9f01cbf6e62dbe0f63198e9297def5d681c Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Sat, 12 May 2018 17:13:03 -0700
Subject: [PATCH 39/44] correctly handled directory switching

---
 docker/build-docker.sh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/docker/build-docker.sh b/docker/build-docker.sh
index 7f2ca93..9e77884 100644
--- a/docker/build-docker.sh
+++ b/docker/build-docker.sh
@@ -6,7 +6,7 @@ set -e
 # make sure we're in docker folder
 original_folder=$PWD
 
-if [ -z $"echo $PWD | grep /docker$" ]; then 
+if [ ! -z "$(echo $PWD | grep /docker$)" ]; then 
     in_docker_folder=1
 else
     in_docker_folder=0

From bf15c6c152ffa338f7e95853582e82bc07f10c27 Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Sat, 12 May 2018 18:29:30 -0700
Subject: [PATCH 40/44] switched to ubuntu 18.04 for python 3.6 default support

---
 docker/linux/Dockerfile | 33 +++++++++++++++++++--------------
 requirements_dev.txt    |  6 +++---
 2 files changed, 22 insertions(+), 17 deletions(-)

diff --git a/docker/linux/Dockerfile b/docker/linux/Dockerfile
index f748450..fda296b 100644
--- a/docker/linux/Dockerfile
+++ b/docker/linux/Dockerfile
@@ -1,30 +1,35 @@
-FROM ubuntu:16.04
+FROM ubuntu:18.04
 ENV DEBIAN_FRONTEND noninteractive
 ENV DOTNETCORESDK_VERSION 2.1.4
-RUN apt-get update && \
+RUN apt-get update
+RUN apt-get install gnupg gnupg2 gnupg1 -y && \
     apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip python3-pip libltdl-dev docker.io && \ 
     curl -sL https://deb.nodesource.com/setup_8.x | bash - && \
-    apt-get install -y nodejs && \
-    alias python=python3 && \
-    alias pip=pip3 
-RUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg && \ 
-    mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg && \ 
-    sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" > /etc/apt/sources.list.d/dotnetdev.list' && \ 
-    apt-get update && \ 
-    apt-get install -y dotnet-sdk-${DOTNETCORESDK_VERSION}
+    apt-get install -y nodejs 
+RUN apt-get install -y wget && \
+    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.asc.gpg && \
+    mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/ && \
+    wget -q https://packages.microsoft.com/config/ubuntu/18.04/prod.list && \
+    mv prod.list /etc/apt/sources.list.d/microsoft-prod.list && \
+    apt-get install -y apt-transport-https && \
+    apt-get update && \
+    apt-get install -y dotnet-sdk-2.1.200
 RUN AZ_REPO=$(lsb_release -cs) && \
     echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
     tee /etc/apt/sources.list.d/azure-cli.list && \
     apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893 && \   
     apt-get update && apt-get install azure-cli
 RUN az extension add --name azure-cli-iot-ext && \
+    npm i npm@latest -g && \
     npm i -g iothub-explorer && npm i -g tree-kill && \
-    apt-get update && \
     apt-get install -y --no-install-recommends python-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev && \
     rm -rf /var/lib/apt/lists/*
-RUN python -m pip install --upgrade pip    
-RUN pip install setuptools
-RUN pip --no-cache-dir install -U iotedgedev
+RUN python -m pip install --upgrade pip && \
+    alias python=python3 && \
+    alias pip=pip3 && \
+    python -m pip install --upgrade pip && \
+    pip install setuptools && \
+    pip --no-cache-dir install -U iotedgedev
 WORKDIR /home/iotedge
 COPY install-dev.sh /scripts/install-dev.sh
 RUN sed -i 's/\r//' /scripts/install-dev.sh
diff --git a/requirements_dev.txt b/requirements_dev.txt
index ad9d055..c94ca58 100644
--- a/requirements_dev.txt
+++ b/requirements_dev.txt
@@ -1,8 +1,8 @@
-bumpversion==0.5.3
-wheel==0.29.0
+bumpversion
+wheel==0.30.0
 watchdog==0.8.3
 flake8==2.6.0
-tox==2.3.1
+tox
 coverage==4.1
 Sphinx==1.4.8
 cryptography

From 88f51269f1bfc04b06a7e28b21d15d670c41b664 Mon Sep 17 00:00:00 2001
From: yorek <info@davidemauri.it>
Date: Sat, 12 May 2018 18:32:58 -0700
Subject: [PATCH 41/44] using double slash to make script work

---
 docker/linux/run-windows.ps1 | 2 +-
 docker/linux/run-windows.sh  | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/docker/linux/run-windows.ps1 b/docker/linux/run-windows.ps1
index b269d9e..9895426 100644
--- a/docker/linux/run-windows.ps1
+++ b/docker/linux/run-windows.ps1
@@ -2,4 +2,4 @@
 $source_folder = Get-Location | Split-Path | Split-Path 
 
 # Run Docker Container
-docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v ${source_folder}:/home/iotedge/tool microsoft/iotedgedev:latest-linux
\ No newline at end of file
+winpty docker run -it -v //var//run//docker.sock://var//run//docker.sock -v ${source_folder}:/home/iotedge/tool microsoft/iotedgedev:latest-linux
\ No newline at end of file
diff --git a/docker/linux/run-windows.sh b/docker/linux/run-windows.sh
index 55b9bee..6a785e7 100644
--- a/docker/linux/run-windows.sh
+++ b/docker/linux/run-windows.sh
@@ -1,5 +1,5 @@
 #!/bin/bash
 
-folder=$(echo $PWD | cut -d/ -f-6) | sed -e 's:/c:c\::g' | sed -e 's:/:\\:g'
+folder=$(echo $PWD | cut -d/ -f-6 | sed 's,/,//,g')
 
-docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v $folder:/home/iotedge/tool microsoft/iotedgedev:latest-linux
+winpty docker run -it -v //var//run//docker.sock://var//run//docker.sock -v $folder://home//iotedge//tool microsoft/iotedgedev:latest-linux

From 0577f94b0a2d7099831286ac58fc23bc435287b4 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Mon, 25 Jun 2018 19:19:31 +0200
Subject: [PATCH 42/44] improved docker image build performances

---
 docker/build-docker.sh         | 28 ++++++++++++++--
 docker/linux/Dockerfile        | 40 +++-------------------
 docker/linux/Dockerfile.base   | 35 +++++++++++++++++++
 docker/linux/run.ps1           |  5 +++
 docker/linux/run.sh            |  5 ++-
 docker/windows/Dockerfile      | 61 +++-------------------------------
 docker/windows/Dockerfile.base | 56 +++++++++++++++++++++++++++++++
 7 files changed, 134 insertions(+), 96 deletions(-)
 create mode 100644 docker/linux/Dockerfile.base
 create mode 100644 docker/linux/run.ps1
 create mode 100644 docker/windows/Dockerfile.base

diff --git a/docker/build-docker.sh b/docker/build-docker.sh
index 9e77884..d9b9fb0 100644
--- a/docker/build-docker.sh
+++ b/docker/build-docker.sh
@@ -52,13 +52,25 @@ function build_linux
     check_docker_expected_mode "linux"
 
     cd linux
+
+    rm iotedgedev-$VERSION-py2.py3-none-any.whl --force
+    
+    cp ../../dist/iotedgedev-$VERSION-py2.py3-none-any.whl iotedgedev-$VERSION-py2.py3-none-any.whl
+
+    docker build \
+        -f Dockerfile.base \
+        -t iotedgedev-linux-base \
+        .
+
     docker build \
         -f Dockerfile \
-        --no-cache \
         -t microsoft/iotedgedev:$VERSION-linux \
         -t microsoft/iotedgedev:latest-linux \
+        --build-arg IOTEDGEDEV_VERSION=$VERSION \
         .
 
+    rm iotedgedev-$VERSION-py2.py3-none-any.whl --force
+
     cd ..
 }
 
@@ -69,15 +81,27 @@ function build_windows
     check_docker_expected_mode "windows"
 
     cd windows
+
+    rm iotedgedev-$VERSION-py2.py3-none-any.whl --force
+    
+    cp ../../dist/iotedgedev-$VERSION-py2.py3-none-any.whl iotedgedev-$VERSION-py2.py3-none-any.whl
+
     docker build \
+        -f Dockerfile.base \
+        -t iotedgedev-windows-base \
         --build-arg PYTHON2_VERSION=$PYTHON2 \
         --build-arg PYTHON3_VERSION=$PYTHON3 \
+        .
+        
+    docker build \
         -f Dockerfile \
-        --no-cache \
+        --build-arg IOTEDGEDEV_VERSION=$VERSION \
         -t microsoft/iotedgedev:$VERSION-windows \
         -t microsoft/iotedgedev:latest-windows \
         .
 
+    rm iotedgedev-$VERSION-py2.py3-none-any.whl --force
+
     cd ..
 }
 
diff --git a/docker/linux/Dockerfile b/docker/linux/Dockerfile
index fda296b..6cc53af 100644
--- a/docker/linux/Dockerfile
+++ b/docker/linux/Dockerfile
@@ -1,36 +1,4 @@
-FROM ubuntu:18.04
-ENV DEBIAN_FRONTEND noninteractive
-ENV DOTNETCORESDK_VERSION 2.1.4
-RUN apt-get update
-RUN apt-get install gnupg gnupg2 gnupg1 -y && \
-    apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip python3-pip libltdl-dev docker.io && \ 
-    curl -sL https://deb.nodesource.com/setup_8.x | bash - && \
-    apt-get install -y nodejs 
-RUN apt-get install -y wget && \
-    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.asc.gpg && \
-    mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/ && \
-    wget -q https://packages.microsoft.com/config/ubuntu/18.04/prod.list && \
-    mv prod.list /etc/apt/sources.list.d/microsoft-prod.list && \
-    apt-get install -y apt-transport-https && \
-    apt-get update && \
-    apt-get install -y dotnet-sdk-2.1.200
-RUN AZ_REPO=$(lsb_release -cs) && \
-    echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
-    tee /etc/apt/sources.list.d/azure-cli.list && \
-    apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893 && \   
-    apt-get update && apt-get install azure-cli
-RUN az extension add --name azure-cli-iot-ext && \
-    npm i npm@latest -g && \
-    npm i -g iothub-explorer && npm i -g tree-kill && \
-    apt-get install -y --no-install-recommends python-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev && \
-    rm -rf /var/lib/apt/lists/*
-RUN python -m pip install --upgrade pip && \
-    alias python=python3 && \
-    alias pip=pip3 && \
-    python -m pip install --upgrade pip && \
-    pip install setuptools && \
-    pip --no-cache-dir install -U iotedgedev
-WORKDIR /home/iotedge
-COPY install-dev.sh /scripts/install-dev.sh
-RUN sed -i 's/\r//' /scripts/install-dev.sh
-ENV DEBIAN_FRONTEND teletype
\ No newline at end of file
+FROM iotedgedev-linux-base
+ARG IOTEDGEDEV_VERSION
+COPY iotedgedev-$IOTEDGEDEV_VERSION-py2.py3-none-any.whl dist/iotedgedev-$IOTEDGEDEV_VERSION-py2.py3-none-any.whl
+RUN pip install dist/iotedgedev-$IOTEDGEDEV_VERSION-py2.py3-none-any.whl
\ No newline at end of file
diff --git a/docker/linux/Dockerfile.base b/docker/linux/Dockerfile.base
new file mode 100644
index 0000000..213457d
--- /dev/null
+++ b/docker/linux/Dockerfile.base
@@ -0,0 +1,35 @@
+FROM ubuntu:18.04
+ENV DEBIAN_FRONTEND noninteractive
+ENV DOTNETCORESDK_VERSION 2.1.200
+RUN apt-get update
+RUN apt-get install gnupg gnupg2 gnupg1 -y && \
+    apt-get install -y --no-install-recommends dialog apt-utils curl apt-transport-https python-pip python3-pip libltdl-dev docker.io && \ 
+    curl -sL https://deb.nodesource.com/setup_8.x | bash - && \
+    apt-get install -y nodejs 
+RUN apt-get install -y wget && \
+    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.asc.gpg && \
+    mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/ && \
+    wget -q https://packages.microsoft.com/config/ubuntu/18.04/prod.list && \
+    mv prod.list /etc/apt/sources.list.d/microsoft-prod.list && \
+    apt-get install -y apt-transport-https && \
+    apt-get update && \
+    apt-get install -y dotnet-sdk-$DOTNETCORESDK_VERSION
+RUN AZ_REPO=$(lsb_release -cs) && \
+    echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
+    tee /etc/apt/sources.list.d/azure-cli.list && \
+    apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893 && \   
+    apt-get update && apt-get install azure-cli
+RUN az extension add --name azure-cli-iot-ext && \
+    npm i npm@latest -g && \
+    npm i -g iothub-explorer && npm i -g tree-kill && \
+    apt-get install -y --no-install-recommends python-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev && \
+    rm -rf /var/lib/apt/lists/*
+RUN python -m pip install --upgrade pip && \
+    alias python=python3 && \
+    alias pip=pip3 && \
+    python -m pip install --upgrade pip && \
+    pip install setuptools 
+WORKDIR /home/iotedge
+COPY install-dev.sh /scripts/install-dev.sh
+RUN sed -i 's/\r//' /scripts/install-dev.sh
+ENV DEBIAN_FRONTEND teletype
\ No newline at end of file
diff --git a/docker/linux/run.ps1 b/docker/linux/run.ps1
new file mode 100644
index 0000000..caa315d
--- /dev/null
+++ b/docker/linux/run.ps1
@@ -0,0 +1,5 @@
+# Get IoTEdgeDev source folder
+$source_folder = Get-Location | Split-Path | Split-Path 
+
+# Run Docker Container
+docker run -it -v //var//run//docker.sock://var//run//docker.sock -v ${source_folder}:/home/iotedge/tool microsoft/iotedgedev:latest-linux
\ No newline at end of file
diff --git a/docker/linux/run.sh b/docker/linux/run.sh
index 9b6de9f..6a785e7 100644
--- a/docker/linux/run.sh
+++ b/docker/linux/run.sh
@@ -1,2 +1,5 @@
 #!/bin/bash
-docker run -it -v /var/run/docker.sock:/var/run/docker.sock microsoft/iotedgedev:latest-linux
\ No newline at end of file
+
+folder=$(echo $PWD | cut -d/ -f-6 | sed 's,/,//,g')
+
+winpty docker run -it -v //var//run//docker.sock://var//run//docker.sock -v $folder://home//iotedge//tool microsoft/iotedgedev:latest-linux
diff --git a/docker/windows/Dockerfile b/docker/windows/Dockerfile
index 2b253cd..39daab3 100644
--- a/docker/windows/Dockerfile
+++ b/docker/windows/Dockerfile
@@ -1,57 +1,4 @@
-FROM microsoft/windowsservercore:1709 AS base
-SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
-ARG PYTHON2_VERSION
-ARG PYTHON3_VERSION
-ENV NODEJS_VERSION 8.11.1
-ENV DOTNETCORESDK_VERSION 2.1.4
-ENV DOCKER_VERSION 17.09.0
-ENV DESTINATION_FOLDER C:\\tools
-WORKDIR /tmp
-RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}.amd64.msi' -f $env:PYTHON2_VERSION); \
-    Write-Host ('Downloading {0}...' -f $python_url); \
-    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
-    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python2-installer.msi'); \
-    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python2'; \
-    Write-Host ('Installing into {0}...' -f $install_folder); \
-    Start-Process python2-installer.msi -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0');    
-RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON3_VERSION); \
-    Write-Host ('Downloading {0}...' -f $python_url); \
-    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
-    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python3-installer.exe'); \
-    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python3'; \
-    Write-Host ('Installing into {0}...' -f $install_folder); \
-    Start-Process python3-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0');     
-RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
-    Write-Host ('Downloading {0}...' -f $node_url); \
-    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
-    (New-Object System.Net.WebClient).DownloadFile($node_url, '/tmp/nodejs-installer.msi'); \
-    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'node'; \
-    Write-Host ('Installing into {0}...' -f $install_folder); \
-    Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); 
-RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0}/dotnet-sdk-{0}-win-x64.zip' -f $env:DOTNETCORESDK_VERSION); \
-    Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
-    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
-    (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk.zip'); \
-    $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'dotnetcoresdk'; \
-    Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
-    Expand-Archive dotnetcoresdk.zip -DestinationPath $unpack_folder; 
-RUN $docker_url = ('https://download.docker.com/win/static/stable/x86_64/docker-{0}-ce.zip'  -f $env:DOCKER_VERSION);\
-    (New-Object System.Net.WebClient).DownloadFile($docker_url, '/tmp/docker.zip'); \
-    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath ''; \
-    Expand-Archive -Path .\docker.zip -DestinationPath $install_folder; \
-    Remove-Item ('{0}\docker\dockerd.exe' -f $env:DESTINATION_FOLDER)
-    
-FROM microsoft/nanoserver:1709
-RUN mkdir c:\\tools 
-COPY --from=base ["tools/", "/tools"]
-USER ContainerAdministrator
-RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python3;C:\tools\python3\Scripts;c:\tools\docker\;"
-USER ContainerUser
-RUN python -m pip install --upgrade pip
-RUN pip install azure-cli
-RUN npm i -g iothub-explorer 
-RUN npm i -g tree-kill
-RUN az extension add --name azure-cli-iot-ext
-RUN pip --no-cache-dir install -U iotedgedev
-WORKDIR /home/iotedge
-COPY install-dev.bat /scripts/install-dev.bat
\ No newline at end of file
+FROM iotedgedev-windows-base
+ARG IOTEDGEDEV_VERSION
+COPY iotedgedev-$IOTEDGEDEV_VERSION-py2.py3-none-any.whl dist/iotedgedev-latest-py2.py3-none-any.whl
+RUN pip install dist/iotedgedev-latest-py2.py3-none-any.whl
\ No newline at end of file
diff --git a/docker/windows/Dockerfile.base b/docker/windows/Dockerfile.base
new file mode 100644
index 0000000..b98d7a3
--- /dev/null
+++ b/docker/windows/Dockerfile.base
@@ -0,0 +1,56 @@
+FROM microsoft/windowsservercore:1709 AS base
+SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
+ARG PYTHON2_VERSION
+ARG PYTHON3_VERSION
+ENV NODEJS_VERSION 8.11.1
+ENV DOTNETCORESDK_VERSION 2.1.4
+ENV DOCKER_VERSION 17.09.0
+ENV DESTINATION_FOLDER C:\\tools
+WORKDIR /tmp
+RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}.amd64.msi' -f $env:PYTHON2_VERSION); \
+    Write-Host ('Downloading {0}...' -f $python_url); \
+    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
+    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python2-installer.msi'); \
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python2'; \
+    Write-Host ('Installing into {0}...' -f $install_folder); \
+    Start-Process python2-installer.msi -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0');    
+RUN $python_url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON3_VERSION); \
+    Write-Host ('Downloading {0}...' -f $python_url); \
+    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
+    (New-Object System.Net.WebClient).DownloadFile($python_url, '/tmp/python3-installer.exe'); \
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'python3'; \
+    Write-Host ('Installing into {0}...' -f $install_folder); \
+    Start-Process python3-installer.exe -Wait -ArgumentList @('/quiet', 'InstallAllUsers=1', 'TargetDir={0}' -f $install_folder, 'PrependPath=1', 'Shortcuts=0', 'Include_doc=0','Include_pip=1', 'Include_test=0');     
+RUN $node_url = ('https://nodejs.org/dist/v{0}/node-v{0}-x64.msi' -f $env:NODEJS_VERSION); \
+    Write-Host ('Downloading {0}...' -f $node_url); \
+    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
+    (New-Object System.Net.WebClient).DownloadFile($node_url, '/tmp/nodejs-installer.msi'); \
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'node'; \
+    Write-Host ('Installing into {0}...' -f $install_folder); \
+    Start-Process nodejs-installer.msi -Wait -ArgumentList @('/quiet', '/q', 'InstallDir={0}' -f $install_folder); 
+RUN $dotnetcoresdk_url = ('https://dotnetcli.blob.core.windows.net/dotnet/Sdk/{0}/dotnet-sdk-{0}-win-x64.zip' -f $env:DOTNETCORESDK_VERSION); \
+    Write-Host ('Downloading {0}...' -f $dotnetcoresdk_url); \
+    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
+    (New-Object System.Net.WebClient).DownloadFile($dotnetcoresdk_url, '/tmp/dotnetcoresdk.zip'); \
+    $unpack_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath 'dotnetcoresdk'; \
+    Write-Host ('Unpacking into {0}...' -f $unpack_folder); \
+    Expand-Archive dotnetcoresdk.zip -DestinationPath $unpack_folder; 
+RUN $docker_url = ('https://download.docker.com/win/static/stable/x86_64/docker-{0}-ce.zip'  -f $env:DOCKER_VERSION);\
+    (New-Object System.Net.WebClient).DownloadFile($docker_url, '/tmp/docker.zip'); \
+    $install_folder = Join-Path -Path $env:DESTINATION_FOLDER -ChildPath ''; \
+    Expand-Archive -Path .\docker.zip -DestinationPath $install_folder; \
+    Remove-Item ('{0}\docker\dockerd.exe' -f $env:DESTINATION_FOLDER)
+    
+FROM microsoft/nanoserver:1709
+RUN mkdir c:\\tools 
+COPY --from=base ["tools/", "/tools"]
+USER ContainerAdministrator
+RUN setx /M PATH "%PATH%;C:\tools\dotnetcoresdk;C:\tools\node\;C:\tools\python3;C:\tools\python3\Scripts;c:\tools\docker\;"
+USER ContainerUser
+RUN python -m pip install --upgrade pip
+RUN pip install azure-cli
+RUN npm i -g iothub-explorer 
+RUN npm i -g tree-kill
+RUN az extension add --name azure-cli-iot-ext
+WORKDIR /home/iotedge
+COPY install-dev.bat /scripts/install-dev.bat
\ No newline at end of file

From 7b548498f0cfbc86d422d8ad421b6d6d47b58d6c Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Mon, 25 Jun 2018 19:21:05 +0200
Subject: [PATCH 43/44] file system cleanup

---
 build.sh                      | 5 ++---
 cleanup.sh                    | 7 +++++++
 docker/linux/build.nocache.sh | 2 --
 docker/linux/push.sh          | 6 ------
 docker/linux/run-windows.ps1  | 5 -----
 docker/linux/run-windows.sh   | 5 -----
 6 files changed, 9 insertions(+), 21 deletions(-)
 create mode 100644 cleanup.sh
 delete mode 100644 docker/linux/build.nocache.sh
 delete mode 100644 docker/linux/push.sh
 delete mode 100644 docker/linux/run-windows.ps1
 delete mode 100644 docker/linux/run-windows.sh

diff --git a/build.sh b/build.sh
index e9f98a7..f1e6ff7 100644
--- a/build.sh
+++ b/build.sh
@@ -84,16 +84,15 @@ function run_push_docker
 }
 
 
-run_tox
+#run_tox
 if [ "$MODE" = "prod" ]; then
     run_bumpversion
 fi
 run_build
 #run_twine
-#run_build_docker
+run_build_docker
 #run_push_docker
 
-
 #./docker/push-docker.sh $DOCKERHUB
 
 echo -e "\n===== All done"
diff --git a/cleanup.sh b/cleanup.sh
new file mode 100644
index 0000000..9ab3ada
--- /dev/null
+++ b/cleanup.sh
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+rm __pycache__ -rf
+rm .pytest_cache -rf
+rm .tox -rf
+rm .pytest_cache -rf
+rm tests/__pycache__ -rf
diff --git a/docker/linux/build.nocache.sh b/docker/linux/build.nocache.sh
deleted file mode 100644
index af2ae79..0000000
--- a/docker/linux/build.nocache.sh
+++ /dev/null
@@ -1,2 +0,0 @@
-export VERSION=$1
-docker build --no-cache -f Dockerfile -t microsoft/iotedgedev:$1 -t microsoft/iotedgedev:$1-linux -t microsoft/iotedgedev:latest -t microsoft/iotedgedev:latest-linux .
diff --git a/docker/linux/push.sh b/docker/linux/push.sh
deleted file mode 100644
index d619043..0000000
--- a/docker/linux/push.sh
+++ /dev/null
@@ -1,6 +0,0 @@
-#!/bin/bash
-winpty docker login
-docker push microsoft/iotedgedev:$1
-docker push microsoft/iotedgedev:$1-linux
-docker push microsoft/iotedgedev:latest
-docker push microsoft/iotedgedev:latest-linux
diff --git a/docker/linux/run-windows.ps1 b/docker/linux/run-windows.ps1
deleted file mode 100644
index 9895426..0000000
--- a/docker/linux/run-windows.ps1
+++ /dev/null
@@ -1,5 +0,0 @@
-# Get IoTEdgeDev source folder
-$source_folder = Get-Location | Split-Path | Split-Path 
-
-# Run Docker Container
-winpty docker run -it -v //var//run//docker.sock://var//run//docker.sock -v ${source_folder}:/home/iotedge/tool microsoft/iotedgedev:latest-linux
\ No newline at end of file
diff --git a/docker/linux/run-windows.sh b/docker/linux/run-windows.sh
deleted file mode 100644
index 6a785e7..0000000
--- a/docker/linux/run-windows.sh
+++ /dev/null
@@ -1,5 +0,0 @@
-#!/bin/bash
-
-folder=$(echo $PWD | cut -d/ -f-6 | sed 's,/,//,g')
-
-winpty docker run -it -v //var//run//docker.sock://var//run//docker.sock -v $folder://home//iotedge//tool microsoft/iotedgedev:latest-linux

From 1c7c9bac39a777dcbeb2ca119ef3eeb5780a77d6 Mon Sep 17 00:00:00 2001
From: Davide Mauri <damauri@microsoft.com>
Date: Tue, 26 Jun 2018 15:45:41 +0200
Subject: [PATCH 44/44] added platform parameter

---
 build.sh | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

diff --git a/build.sh b/build.sh
index f1e6ff7..c75b163 100644
--- a/build.sh
+++ b/build.sh
@@ -8,11 +8,12 @@ function show_help
     echo "Usage:"
     echo "build.sh <mode>"
     echo ""
-    echo "mode: test|prod"
+    echo "mode: test|prod [windows|linux]"
     exit 1
 }
 
 MODE="$1"
+PLATFORM="$2"
 
 if [ -z "$MODE" ]; then
     show_help
@@ -20,14 +21,18 @@ fi
 
 echo -e "\n===== Setting up build environment"
 if [ "$MODE" = "test" ]; then
-    echo "Environment: TEST"
+    echo "Environment: $MODE"
 elif [ "$MODE" = "prod" ]; then
-    echo "Environment: PROD"
+    echo "Environment: $MODE"
 else
     echo "ERROR> Build mode parameter not known. must be 'prod' or 'test'"
     exit 1
 fi
 
+if [ ! -z $PLATFORM ]; then
+    echo "Platform: $PLATFORM"
+fi
+
 echo -e "\n===== Checking pre-requisistes"
 IS_ADMIN=$(powershell '([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")')
 if [ "$IS_ADMIN" = "False" ]; then        
@@ -75,7 +80,7 @@ function run_twine
 
 function run_build_docker
 {
-    ./docker/build-docker.sh
+    ./docker/build-docker.sh $PLATFORM
 }
 
 function run_push_docker 
